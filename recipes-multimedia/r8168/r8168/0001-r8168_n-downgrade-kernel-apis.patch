From 0075c40a903a95b806c3d4516397c8af607d17ea Mon Sep 17 00:00:00 2001
From: "deepak.s" <deepak.s@adlinktech.com>
Date: Fri, 19 Jul 2024 18:15:58 +0530
Subject: [PATCH] r8168_n-downgrade-kernel-apis

---
 r8168_n.c | 22 +++++++++++-----------
 1 file changed, 11 insertions(+), 11 deletions(-)

diff --git a/r8168_n.c b/r8168_n.c
index e9c0363..11e5930 100755
--- a/r8168_n.c
+++ b/r8168_n.c
@@ -3715,7 +3715,7 @@ static void rtl8168_mac_loopback_test(struct rtl8168_private *tp)
         txd->opts2 = 0;
         while (1) {
                 memset(tmpAddr, pattern++, len - 14);
-                pci_dma_sync_single_for_device(tp->pci_dev,
+                dma_sync_single_for_device(&tp->pci_dev->dev,
                                                le64_to_cpu(mapping),
                                                len, DMA_TO_DEVICE);
                 txd->opts1 = cpu_to_le32(DescOwn | FirstFrag | LastFrag | len);
@@ -3743,7 +3743,7 @@ static void rtl8168_mac_loopback_test(struct rtl8168_private *tp)
                 if (rx_len == len) {
                         dma_sync_single_for_cpu(tp_to_dev(tp), le64_to_cpu(rxd->addr), tp->rx_buf_sz, DMA_FROM_DEVICE);
                         i = memcmp(skb->data, rx_skb->data, rx_len);
-                        pci_dma_sync_single_for_device(tp->pci_dev, le64_to_cpu(rxd->addr), tp->rx_buf_sz, DMA_FROM_DEVICE);
+                        dma_sync_single_for_device(&tp->pci_dev->dev, le64_to_cpu(rxd->addr), tp->rx_buf_sz, DMA_FROM_DEVICE);
                         if (i == 0) {
 //              dev_printk(KERN_INFO, tp_to_dev(tp), "loopback test finished\n",rx_len,len);
                                 break;
@@ -26446,11 +26446,11 @@ rtl8168_init_board(struct pci_dev *pdev,
 
         if ((sizeof(dma_addr_t) > 4) &&
             use_dac &&
-            !pci_set_dma_mask(pdev, DMA_BIT_MASK(64)) &&
-            !pci_set_consistent_dma_mask(pdev, DMA_BIT_MASK(64))) {
+	    !dma_set_mask(&pdev->dev, DMA_BIT_MASK(64)) &&
+            !dma_set_coherent_mask(&pdev->dev, DMA_BIT_MASK(64))) {
                 dev->features |= NETIF_F_HIGHDMA;
         } else {
-                rc = pci_set_dma_mask(pdev, DMA_BIT_MASK(32));
+                rc = dma_set_mask(&pdev->dev, DMA_BIT_MASK(32));
                 if (rc < 0) {
 #if LINUX_VERSION_CODE > KERNEL_VERSION(2,6,0)
                         if (netif_msg_probe(tp))
@@ -26880,7 +26880,7 @@ rtl8168_init_one(struct pci_dev *pdev,
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,22)
                 if ((tp->mcfg == CFG_METHOD_1) || (tp->mcfg == CFG_METHOD_2) || (tp->mcfg == CFG_METHOD_3)) {
                         dev->hw_features &= ~NETIF_F_IPV6_CSUM;
-                        netif_set_gso_max_size(dev, LSO_32K);
+                        netif_set_tso_max_size(dev, LSO_32K);
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(3,18,0)
                         dev->gso_max_segs = NIC_MAX_PHYS_BUF_COUNT_LSO_64K;
 #if LINUX_VERSION_CODE < KERNEL_VERSION(4,7,0)
@@ -26894,7 +26894,7 @@ rtl8168_init_one(struct pci_dev *pdev,
                                 dev->hw_features |= NETIF_F_TSO6;
                                 //dev->features |=  NETIF_F_TSO6;
                         }
-                        netif_set_gso_max_size(dev, LSO_64K);
+                        netif_set_tso_max_size(dev, LSO_64K);
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(3,18,0)
                         dev->gso_max_segs = NIC_MAX_PHYS_BUF_COUNT_LSO2;
 #if LINUX_VERSION_CODE < KERNEL_VERSION(4,7,0)
@@ -29020,7 +29020,7 @@ static void r8168_csum_workaround(struct rtl8168_private *tp,
                 struct sk_buff *segs, *nskb;
 
                 features &= ~(NETIF_F_SG | NETIF_F_IPV6_CSUM | NETIF_F_TSO6);
-                segs = skb_gso_segment(skb, features);
+     /*         segs = skb_gso_segment(skb, features);
                 if (IS_ERR(segs) || !segs)
                         goto drop;
 
@@ -29030,7 +29030,7 @@ static void r8168_csum_workaround(struct rtl8168_private *tp,
                         nskb->next = NULL;
                         rtl8168_start_xmit(nskb, tp->dev);
                 } while (segs);
-
+	*/
                 dev_consume_skb_any(skb);
         } else if (skb->ip_summed == CHECKSUM_PARTIAL) {
                 if (skb_checksum_help(skb) < 0)
@@ -29150,8 +29150,8 @@ rtl8168_start_xmit(struct sk_buff *skb,
                                 case __constant_htons(ETH_P_IPV6):
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(3,14,0)
                                         if (msdn_giant_send_check(skb)) {
-                                                spin_unlock_irqrestore(&tp->lock, flags);
-                                                r8168_csum_workaround(tp, skb);
+                                                //spin_unlock_irqrestore(&tp->lock, flags);
+                                                //r8168_csum_workaround(tp, skb);
                                                 goto out;
                                         }
 #endif
-- 
2.43.2


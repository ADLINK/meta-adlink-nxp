From 41123058b1df5d15cad5bbc22bf72210c385fe5e Mon Sep 17 00:00:00 2001
From: "po.cheng" <po.cheng@adlinktech.com>
Date: Wed, 27 Dec 2023 10:58:49 +0800
Subject: [PATCH 08/22] sp2-imx8mp: patch: lvds: add panel-generic-lvds support

Signed-off-by: po.cheng <po.cheng@adlinktech.com>
---
 drivers/video/Kconfig              |  16 +++
 drivers/video/Makefile             |   1 +
 drivers/video/panel-generic-lvds.c | 157 +++++++++++++++++++++++++++++
 3 files changed, 174 insertions(+)
 create mode 100644 drivers/video/panel-generic-lvds.c

diff --git a/drivers/video/Kconfig b/drivers/video/Kconfig
index e68b6694876e..ee988750c86b 100644
--- a/drivers/video/Kconfig
+++ b/drivers/video/Kconfig
@@ -139,6 +139,14 @@ config VIDEO_MIPI_DSI
 	  The MIPI Display Serial Interface (MIPI DSI) defines a high-speed
 	  serial interface between a host processor and a display module.
 
+config VIDEO_LVDS_IF
+	bool "Support LVDS interface"
+	depends on DM_VIDEO
+	help
+	  Support LVDS interface for driving a LVDS compatible device.
+	  The LVDS defines a high-speed serial interface between a host processor
+	  and a display module.
+
 config CONSOLE_NORMAL
 	bool "Support a simple text console"
 	depends on DM_VIDEO
@@ -464,6 +472,14 @@ config VIDEO_LCD_ILITEK_ILI9881C
 	Say Y here if you want to enable support for Ilitek ILI9881C
 	720x1280 DSI video mode panel.
 
+config VIDEO_LCD_GENERIC_LVDS
+	bool "Generic LCD panel with LVDS interface support"
+	depends on DM_VIDEO
+	select VIDEO_LVDS_IF
+	default n
+	help
+	Say Y here if you want to enable support for generic lvds panel.
+
 config VIDEO_LCD_ROCKTECH_HIMAX8394F
 	bool "Rocktech Himax8394f 720x1280 DSI video mode panel"
 	depends on DM_VIDEO
diff --git a/drivers/video/Makefile b/drivers/video/Makefile
index b75b55f5b2f4..992c12dcc9aa 100644
--- a/drivers/video/Makefile
+++ b/drivers/video/Makefile
@@ -60,6 +60,7 @@ obj-$(CONFIG_VIDEO_LCD_ORISETECH_OTM8009A) += orisetech_otm8009a.o
 obj-$(CONFIG_VIDEO_LCD_RAYDIUM_RM68200) += raydium-rm68200.o
 obj-$(CONFIG_VIDEO_LCD_RAYDIUM_RM67191) += raydium-rm67191.o
 obj-$(CONFIG_VIDEO_LCD_ILITEK_ILI9881C) += panel-ilitek-ili9881c.o
+obj-$(CONFIG_VIDEO_LCD_GENERIC_LVDS) += panel-generic-lvds.o
 obj-$(CONFIG_VIDEO_LCD_ROCKTECH_HIMAX8394F) += rocktech-hx8394f.o
 obj-$(CONFIG_VIDEO_LCD_SSD2828) += ssd2828.o
 obj-$(CONFIG_VIDEO_LCD_TDO_TL070WSH30) += tdo-tl070wsh30.o
diff --git a/drivers/video/panel-generic-lvds.c b/drivers/video/panel-generic-lvds.c
new file mode 100644
index 000000000000..2310de2b9426
--- /dev/null
+++ b/drivers/video/panel-generic-lvds.c
@@ -0,0 +1,157 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (c) 2016 Google, Inc
+ * Written by Simon Glass <sjg@chromium.org>
+ */
+
+#include <common.h>
+#include <backlight.h>
+#include <dm.h>
+#include <log.h>
+#include <panel.h>
+#include <asm/gpio.h>
+#include <power/regulator.h>
+
+struct lvds_panel_priv {
+	struct udevice *reg;
+	struct udevice *power;
+	struct udevice *backlight;
+	struct gpio_desc enable;
+	struct gpio_desc reset;
+	struct display_timing of_timings;
+};
+
+static const struct display_timing default_timing = {
+	.pixelclock.typ	= 62000000,
+	.hactive.typ	= 720,
+	.hfront_porch.typ	= 10,
+	.hback_porch.typ	= 30,
+	.hsync_len.typ	= 20,
+	.vactive.typ	= 1280,
+	.vfront_porch.typ	= 10,
+	.vback_porch.typ	= 20,
+	.vsync_len.typ	= 10,
+};
+
+static int lvds_panel_get_display_timing(struct udevice *dev,
+					    struct display_timing *timings)
+{
+	struct lvds_panel_priv *priv = dev_get_priv(dev);
+
+	if (priv->of_timings.pixelclock.typ != 0) {
+		debug("%s: retrieve display timing: (%d, %d)\n", __func__, priv->of_timings.hactive.typ, priv->of_timings.vactive.typ);
+		memcpy(timings, &priv->of_timings, sizeof(*timings));
+	} else {
+		debug("%s: retrieve default display timing: (%d, %d)\n", __func__, priv->of_timings.hactive.typ, priv->of_timings.vactive.typ);
+		memcpy(timings, &default_timing, sizeof(*timings));
+	}
+
+	return 0;
+}
+
+static int lvds_panel_enable_backlight(struct udevice *dev)
+{
+	struct lvds_panel_priv *priv = dev_get_priv(dev);
+	int ret;
+
+	dm_gpio_set_value(&priv->enable, 1);
+	if (priv->backlight) {
+		debug("%s: start, backlight = '%s'\n", __func__, priv->backlight->name);
+		ret = backlight_enable(priv->backlight);
+		debug("%s: done, ret = %d\n", __func__, ret);
+		if (ret)
+			return ret;
+	}
+
+	return 0;
+}
+
+static int lvds_panel_set_backlight(struct udevice *dev, int percent)
+{
+	struct lvds_panel_priv *priv = dev_get_priv(dev);
+	int ret;
+
+	debug("%s: start, backlight = '%s'\n", __func__, priv->backlight->name);
+	dm_gpio_set_value(&priv->enable, 1);
+	if (priv->backlight) {
+		ret = backlight_set_brightness(priv->backlight, percent);
+		debug("%s: done, ret = %d\n", __func__, ret);
+		if (ret)
+			return ret;
+	}
+
+	return 0;
+}
+
+static int lvds_panel_of_to_plat(struct udevice *dev)
+{
+	struct lvds_panel_priv *priv = dev_get_priv(dev);
+	int ret;
+
+	if (IS_ENABLED(CONFIG_DM_REGULATOR)) {
+		ret = uclass_get_device_by_phandle(UCLASS_REGULATOR, dev,
+						   "power-supply", &priv->reg);
+		if (ret) {
+			debug("%s: Warning: cannot get power supply: ret=%d\n", __func__, ret);
+			if (ret != -ENOENT)
+				return ret;
+		}
+	}
+	ret = uclass_get_device_by_phandle(UCLASS_PANEL_BACKLIGHT, dev,
+					   "backlight", &priv->backlight);
+	if (ret) {
+		debug("%s: Cannot get backlight: ret=%d\n", __func__, ret);
+		priv->backlight = NULL;
+	}
+
+	ret = ofnode_decode_display_timing(dev_ofnode(dev), 0, &priv->of_timings);
+	if (ret) {
+		debug("%s: Cannot get display timing: ret=%d\n", __func__, ret);
+		memset(&priv->of_timings, 0, sizeof(struct display_timing));
+	}
+
+	ret = gpio_request_by_name(dev, "enable-gpios", 0, &priv->enable, GPIOD_IS_OUT);
+	if (ret) {
+		debug("%s: Warning: cannot get enable GPIO: ret=%d\n", __func__, ret);
+		if (ret != -ENOENT)
+			return log_ret(ret);
+	}
+
+	return 0;
+}
+
+static int lvds_panel_probe(struct udevice *dev)
+{
+	struct lvds_panel_priv *priv = dev_get_priv(dev);
+	int ret;
+
+	if (IS_ENABLED(CONFIG_DM_REGULATOR) && priv->reg) {
+		debug("%s: Enable regulator '%s'\n", __func__, priv->reg->name);
+		ret = regulator_set_enable(priv->reg, true);
+		if (ret)
+			return ret;
+	}
+
+	return 0;
+}
+
+static const struct panel_ops lvds_panel_ops = {
+	.enable_backlight	= lvds_panel_enable_backlight,
+	.set_backlight		= lvds_panel_set_backlight,
+	.get_display_timing = lvds_panel_get_display_timing,
+};
+
+static const struct udevice_id lvds_panel_ids[] = {
+	{ .compatible = "lvds-panel" },
+	{ }
+};
+
+U_BOOT_DRIVER(lvds_panel) = {
+	.name	= "lvds_panel",
+	.id	= UCLASS_PANEL,
+	.of_match = lvds_panel_ids,
+	.ops	= &lvds_panel_ops,
+	.of_to_plat	= lvds_panel_of_to_plat,
+	.probe		= lvds_panel_probe,
+	.priv_auto	= sizeof(struct lvds_panel_priv),
+};
-- 
2.25.1


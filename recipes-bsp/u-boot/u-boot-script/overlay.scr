#
# set device tree overlays according to eeprom settings
#
setenv set_overlays 'echo "EEPROM env variable: E_disp: ${E_disp}...";
if test -n ${E_disp}; then
  if test ${E_disp} = 10; then
    setenv overlays ${overlays} 10inch-overlay.dtbo;
  fi;
fi;'

#
# set load_overlays commands to load dtbo
#
setenv load_overlays 'echo "DT overlay:";
fdt address ${fdt_addr};
fdt resize 8192;
setexpr dtboaddr ${fdt_addr} + 0xF0000;
for ov in ${overlays}; do
  echo Overlaying ${ov}...;
  fatload mmc ${mmcdev}:${mmcpart} ${dtboaddr} ${ov} && fdt apply ${dtboaddr};
done;'

#
# set boot arguments from emmc boot
#
setenv emmcargs 'setenv bootargs ${jh_clk} ${mcore_clk} console=${console} pcie_cz_enabled=${pcie_compliance} pcie_phy_tuned=adlink net.ifnames=0 root=${mmcroot};'

#
# modified mmcboot
#
setenv emmcboot 'echo Booting from mmc ...;
run emmcargs;
echo Load fdtfile: ${fdtfile}...;
if run loadfdt; then
  if run load_overlays; then
    booti ${loadaddr} - ${fdt_addr_r};
  else
    echo WARN: Cannot load the DTBO;
  fi;
else
  echo WARN: Cannot load the DT;
fi;'

#
# starting point
#

# 1. parse eeprom settings. e.g. sets up E_disp, E_prj, E_macs1, E_macs2, etc.
jsinfo
# 2. set overlays based on eeprom settings
run set_overlays;
# 3. boot (based on mmcboot)
if run loadimage; then
  run emmcboot;
else
  run netboot;
fi;


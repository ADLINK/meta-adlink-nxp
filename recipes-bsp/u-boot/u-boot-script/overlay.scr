#
# set device tree overlays according to eeprom settings
#
setenv set_overlays 'echo "EEPROM env variable: E_disp: ${E_disp}...";
if test -n ${E_disp}; then
  if test ${E_disp} = 7; then
    setenv overlays ${overlays} 7inch-overlay.dtbo;
  elif test ${E_disp} = 7d; then
    setenv overlays ${overlays} 7dsi-overlay.dtbo;
  elif test ${E_disp} = 10; then
    setenv overlays ${overlays} 10inch-overlay.dtbo;
  fi;
fi;
if test -n ${E_eth}; then
  if test ${E_eth} = 1; then
    setenv overlays ${overlays} eth0-overlay.dtbo;
  fi
fi;
if test -n ${E_wl}; then
  if test ${E_wl} = sur; then
    setenv overlays ${overlays} awcm276masur-overlay.dtbo;
  elif test ${E_wl} = pur; then
    setenv overlays ${overlays} awcm276mapur-overlay.dtbo;
  fi;
fi;
if test -n ${E_cma}; then
  if test ${E_cma} = 950; then
    setenv overlays ${overlays} cma950mb-overlay.dtbo;
  elif test ${E_cma} = 750; then
    setenv overlays ${overlays} cma750mb-overlay.dtbo;
  elif test ${E_cma} = 400; then
    setenv overlays ${overlays} cma400mb-overlay.dtbo;
  fi;
fi;'

#
# set load_overlays commands to load dtbo
#
setenv load_overlays 'echo "DT overlays: ${overlays}";
fdt address ${fdt_addr};
fdt resize 8192;
setexpr dtboaddr ${fdt_addr} + 0xF0000;
for ov in ${overlays}; do
  echo Overlaying ${ov}...;
  fatload mmc ${mmcdev}:${mmcpart} ${dtboaddr} ${ov} && fdt apply ${dtboaddr};
done;'

#
# set boot arguments from emmc boot
#
setenv emmcargs 'setenv bootargs ${jh_clk} ${mcore_clk} console=${console} pcie_cz_enabled=${pcie_compliance} pcie_phy_tuned=adlink net.ifnames=0 root=${mmcroot};'

#
# set boot arguments for initrd boot
#
setenv initrdargs 'setenv bootargs ${jh_clk} ${mcore_clk} console=${console} pcie_cz_enabled=${pcie_compliance} pcie_phy_tuned=adlink net.ifnames=0 initrd=${initrd_addr},0x${filesize} rdinit=/sbin/init root=/dev/ram0;'

#
# modified mmcboot
#
setenv emmcboot 'echo Booting from mmc ...;
run emmcargs;
echo Load fdtfile: ${fdtfile}...;
if run loadfdt; then
  if run load_overlays; then
    booti ${loadaddr} - ${fdt_addr_r};
  else
    echo WARN: Cannot load the DTBO;
  fi;
else
  echo WARN: Cannot load the DT;
fi;'

#
# initrdboot
# kernel_addr_r = loadaddr = CONFIG_SYS_LOAD_ADDR = 0x40400000 (from adlink_sp2imx8mp_defconfig)
# fdt_addr_r = fdt_addr = 0x4300000 (from sp2imx8mp.h)
# initrd_addr = 0x43800000 (mfg env from sp2imx8mp.g)
#
setenv initrdboot 'echo Booting from initrd ...;
echo Load fdtfile: ${fdtfile}...;
if run loadfdt; then
  if run load_overlays; then
    booti ${loadaddr} ${initrd_addr} ${fdt_addr_r};
  else
    echo WARN: Cannot load the DTBO;
  fi;
else
  echo WARN: Cannot load the DT;
fi;'

#
# load initrd
#
setenv loadinitrd 'echo Load initrd...;
fatload mmc ${mmcdev}:${mmcpart} ${initrd_addr} rootfs.cpio.gz;
'

#
# detect initrd boot
# no emmc rootfs partition, has rootfs.cpio.gz, and data partition with wic file
#
setenv detect_initrd 'echo Detect initrd boot...;
mmc rescan;
if test -n ${boot_device} && test ${boot_device} = SD && mmc dev 2 && !mmc dev 2 1; then
  if test -e mmc ${sd_dev}:1 rootfs.cpio.gz; then
    echo Found rootfs.cpio.gz...;
	setenv boot_initrd 1;
  fi;
fi;'

#
# starting point
#

# 1. parse eeprom settings. e.g. sets up E_disp, E_prj, E_macs1, E_macs2, etc.
jsinfo;
# 2. set overlays based on eeprom settings
run set_overlays;
# 3. check for initrd boot
run detect_initrd;
# 4. load kernel and boot (based on mmcboot or initdboot)
if run loadimage; then
  if test -n ${boot_initrd} && test ${boot_initrd} = 1; then
    if run loadinitrd; then
      run initrdargs;
      run initrdboot;
    fi
  else
    run emmcboot;
  fi;
else
  run netboot;
fi;


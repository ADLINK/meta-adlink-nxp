From 325ce37aff149c63141b1c0b28a69d4e835ce16e Mon Sep 17 00:00:00 2001
From: Antony Abee Prakash XV <antonyabee.prakashxv@adlinktech.com>
Date: Tue, 28 Jul 2020 18:40:26 +0530
Subject: [PATCH 15/15] Fix and streamline TLV320AIC23 drivers

The iMX-TLV320AIC23 driver isn't from Freescale, but from a company named
Eukrea Electromatique, originally for their own boards.

- Fix a bug in the codec driver's routing table causing 9 error messages.
- Remove Eukrea naming, i.MX is from Freescale, TLV320AIC23 is from TI,
  driver was written by Eukrea, but it's DT capable, so it's not exclusive:
  - Kconfig option title
  - 'model' option
  - driver 'compatible' string
- Other options just have changed over time, this driver remaining (one of)
  the last with the old semantics:
  - 'audio-codec' option (also moved from ssi node)
  - 'mux-int/ext-port' options
- All options stay backwards compatible, the DT binding documents new and
  old names.
- Reverted back the bit clock calculation using slot number and width method
- set_sysclk() is used to override the output bit clock rate

Signed-off-by: Antony Abee Prakash XV <antonyabee.prakashxv@adlinktech.com>
---
 .../bindings/sound/eukrea-tlv320.txt          | 23 ++++---
 sound/soc/fsl/Kconfig                         |  2 +-
 sound/soc/fsl/eukrea-tlv320.c                 | 32 +++++++---
 sound/soc/fsl/fsl_ssi.c                       | 62 ++++++++++++-------
 4 files changed, 80 insertions(+), 39 deletions(-)

diff --git a/Documentation/devicetree/bindings/sound/eukrea-tlv320.txt b/Documentation/devicetree/bindings/sound/eukrea-tlv320.txt
index 6dfa88c4dc1e..be13d67d092e 100644
--- a/Documentation/devicetree/bindings/sound/eukrea-tlv320.txt
+++ b/Documentation/devicetree/bindings/sound/eukrea-tlv320.txt
@@ -2,15 +2,21 @@ Audio complex for Eukrea boards with tlv320aic23 codec.
 
 Required properties:
 
-  - compatible		: "eukrea,asoc-tlv320"
+  - compatible         	: "fsl,imx-audio-tlv320aic23" or
+			 "eukrea,asoc-tlv320" (deprecated)
 
-  - eukrea,model	: The user-visible name of this sound complex.
+  - model		: The user-visible name of this sound complex.
+  - eukrea,model       	: Dito, deprecated.
 
   - ssi-controller	: The phandle of the SSI controller.
 
-  - fsl,mux-int-port	: The internal port of the i.MX audio muxer (AUDMUX).
+  - mux-int-port	: The internal port of the i.MX audio muxer (AUDMUX).
+  - fsl,mux-int-port   	: Dito, deprecated.
 
-  - fsl,mux-ext-port	: The external port of the i.MX audio muxer.
+  - mux-ext-port	: The external port of the i.MX audio muxer.
+  - fsl,mux-ext-port   	: Dito, deprecated.
+
+  - audio-codec         : The phandle of the audio codec.
 
 Note: The AUDMUX port numbering should start at 1, which is consistent with
 hardware manual.
@@ -18,9 +24,10 @@ hardware manual.
 Example:
 
 	sound {
-		compatible = "eukrea,asoc-tlv320";
-		eukrea,model = "imx51-eukrea-tlv320aic23";
+		compatible = "fsl,imx-audio-tlv320aic23";
+		model = "imx51-eukrea-tlv320aic23";
 		ssi-controller = <&ssi2>;
-		fsl,mux-int-port = <2>;
-		fsl,mux-ext-port = <3>;
+		mux-int-port = <2>;
+		mux-ext-port = <3>;
+		audio-codec = <&codec>;
 	};
diff --git a/sound/soc/fsl/Kconfig b/sound/soc/fsl/Kconfig
index e3f94e95e746..d71c817a1e01 100644
--- a/sound/soc/fsl/Kconfig
+++ b/sound/soc/fsl/Kconfig
@@ -285,7 +285,7 @@ config SND_SOC_PHYCORE_AC97
 	  and phyCARD boards in AC97 mode
 
 config SND_SOC_EUKREA_TLV320
-	tristate "Eukrea TLV320"
+	tristate "SoC Audio support for i.MX boards with TLV320AIC23"
 	depends on ARCH_MXC && !ARM64 && I2C
 	select SND_SOC_TLV320AIC23_I2C
 	select SND_SOC_IMX_AUDMUX
diff --git a/sound/soc/fsl/eukrea-tlv320.c b/sound/soc/fsl/eukrea-tlv320.c
index 6f3b768489f6..76cf8cdcb766 100644
--- a/sound/soc/fsl/eukrea-tlv320.c
+++ b/sound/soc/fsl/eukrea-tlv320.c
@@ -91,10 +91,13 @@ static int eukrea_tlv320_probe(struct platform_device *pdev)
 	eukrea_tlv320.dev = &pdev->dev;
 	if (np) {
 		ret = snd_soc_of_parse_card_name(&eukrea_tlv320,
-						 "eukrea,model");
+						 "model");
+		if (ret) /* backwards compatible */
+			ret = snd_soc_of_parse_card_name(&eukrea_tlv320,
+							 "eukrea,model");
 		if (ret) {
 			dev_err(&pdev->dev,
-				"eukrea,model node missing or invalid.\n");
+				"model node missing or invalid.\n");
 			goto err;
 		}
 
@@ -107,22 +110,32 @@ static int eukrea_tlv320_probe(struct platform_device *pdev)
 			goto err;
 		}
 
-		codec_np = of_parse_phandle(ssi_np, "codec-handle", 0);
+		codec_np = of_parse_phandle(pdev->dev.of_node, "audio-codec", 0);
+		if (!codec_np) /* backwards compatible */
+			codec_np = of_parse_phandle(ssi_np, "codec-handle", 0);
+
 		if (codec_np)
 			eukrea_tlv320_dai.codecs->of_node = codec_np;
 		else
-			dev_err(&pdev->dev, "codec-handle node missing or invalid.\n");
+			dev_err(&pdev->dev, "audio-codec node missing or invalid.\n");
+
+		ret = of_property_read_u32(np, "mux-int-port", &int_port);
+		if (ret) /* backwards compatible */
+			ret = of_property_read_u32(np, "fsl,mux-int-port", &int_port);
 
-		ret = of_property_read_u32(np, "fsl,mux-int-port", &int_port);
 		if (ret) {
 			dev_err(&pdev->dev,
-				"fsl,mux-int-port node missing or invalid.\n");
+				"mux-int-port node missing or invalid.\n");
 			goto err;
 		}
-		ret = of_property_read_u32(np, "fsl,mux-ext-port", &ext_port);
+
+		ret = of_property_read_u32(np, "mux-ext-port", &ext_port);
+		if (ret) /* backwards compatible */
+			ret = of_property_read_u32(np, "fsl,mux-ext-port", &ext_port);
+
 		if (ret) {
 			dev_err(&pdev->dev,
-				"fsl,mux-ext-port node missing or invalid.\n");
+				"mux-ext-port node missing or invalid.\n");
 			goto err;
 		}
 
@@ -211,7 +224,8 @@ static int eukrea_tlv320_remove(struct platform_device *pdev)
 }
 
 static const struct of_device_id imx_tlv320_dt_ids[] = {
-	{ .compatible = "eukrea,asoc-tlv320"},
+	{ .compatible = "eukrea,asoc-tlv320"},	/* backwards compatible */
+	{ .compatible = "fsl,imx-audio-tlv320aic23"},
 	{ /* sentinel */ }
 };
 MODULE_DEVICE_TABLE(of, imx_tlv320_dt_ids);
diff --git a/sound/soc/fsl/fsl_ssi.c b/sound/soc/fsl/fsl_ssi.c
index e4a38ebd4fc4..896f378fc670 100644
--- a/sound/soc/fsl/fsl_ssi.c
+++ b/sound/soc/fsl/fsl_ssi.c
@@ -271,13 +271,14 @@ struct fsl_ssi {
 	bool use_dyna_fifo;
 	bool has_ipg_clk_name;
 	unsigned int fifo_depth;
-	unsigned int slot_width;
-	unsigned int slots;
+//	unsigned int slot_width;
+//	unsigned int slots;
 	struct fsl_ssi_regvals regvals[2];
 
 	struct clk *clk;
 	struct clk *baudclk;
 	unsigned int baudclk_streams;
+	unsigned int bitclk_freq;
 
 	u32 regcache_sfcsr;
 	u32 regcache_sacnt;
@@ -669,8 +670,10 @@ static void fsl_ssi_shutdown(struct snd_pcm_substream *substream,
  * Note: This function can be only called when using SSI as DAI master
  *
  * Quick instruction for parameters:
- * freq: Output BCLK frequency = samplerate * slots * slot_width
- *       (In 2-channel I2S Master mode, slot_width is fixed 32)
+ * freq: Output BCLK frequency = samplerate * 32 (fixed) * channels
+ * dir: SND_SOC_CLOCK_OUT -> TxBCLK, SND_SOC_CLOCK_IN -> RxBCLK.
+ * //freq: Output BCLK frequency = samplerate * slots * slot_width
+ * //      (In 2-channel I2S Master mode, slot_width is fixed 32)
  */
 static int fsl_ssi_set_bclk(struct snd_pcm_substream *substream,
 			    struct snd_soc_dai *dai,
@@ -681,22 +684,28 @@ static int fsl_ssi_set_bclk(struct snd_pcm_substream *substream,
 	struct regmap *regs = ssi->regs;
 	u32 pm = 999, div2, psr, stccr, mask, afreq, factor, i;
 	unsigned long clkrate, baudrate, tmprate;
-	unsigned int slots = params_channels(hw_params);
-	unsigned int slot_width = 32;
+	//unsigned int slots = params_channels(hw_params);
+	//unsigned int slot_width = 32;
 	u64 sub, savesub = 100000;
 	unsigned int freq;
 	bool baudclk_is_used;
 	int ret;
 
-	/* Override slots and slot_width if being specifically set... */
-	if (ssi->slots)
-		slots = ssi->slots;
-	/* ...but keep 32 bits if slots is 2 -- I2S Master mode */
-	if (ssi->slot_width && slots != 2)
-		slot_width = ssi->slot_width;
+	/* Prefer the explicitly set bitclock frequency */
+	if (ssi->bitclk_freq)
+		freq = ssi->bitclk_freq;
+	else
+		freq = params_channels(hw_params) * 32 * params_rate(hw_params);
+
+//	/* Override slots and slot_width if being specifically set... */
+//	if (ssi->slots)
+//		slots = ssi->slots;
+//	/* ...but keep 32 bits if slots is 2 -- I2S Master mode */
+//	if (ssi->slot_width && slots != 2)
+//		slot_width = ssi->slot_width;
 
-	/* Generate bit clock based on the slot number and slot width */
-	freq = slots * slot_width * params_rate(hw_params);
+//	/* Generate bit clock based on the slot number and slot width */
+//	freq = slots * slot_width * params_rate(hw_params);
 
 	/* Don't apply it to any non-baudclk circumstance */
 	if (IS_ERR(ssi->baudclk))
@@ -779,6 +788,16 @@ static int fsl_ssi_set_bclk(struct snd_pcm_substream *substream,
 	return 0;
 }
 
+static int fsl_ssi_set_dai_sysclk(struct snd_soc_dai *cpu_dai,
+                int clk_id, unsigned int freq, int dir)
+{
+        struct fsl_ssi *ssi = snd_soc_dai_get_drvdata(cpu_dai);
+
+        ssi->bitclk_freq = freq;
+
+        return 0;
+}
+
 /**
  * Configure SSI based on PCM hardware parameters
  *
@@ -1037,11 +1056,11 @@ static int fsl_ssi_set_dai_tdm_slot(struct snd_soc_dai *dai, u32 tx_mask,
 	struct regmap *regs = ssi->regs;
 	u32 val;
 
-	/* The word length should be 8, 10, 12, 16, 18, 20, 22 or 24 */
-	if (slot_width & 1 || slot_width < 8 || slot_width > 24) {
-		dev_err(dai->dev, "invalid slot width: %d\n", slot_width);
-		return -EINVAL;
-	}
+//	/* The word length should be 8, 10, 12, 16, 18, 20, 22 or 24 */
+//	if (slot_width & 1 || slot_width < 8 || slot_width > 24) {
+//		dev_err(dai->dev, "invalid slot width: %d\n", slot_width);
+//		return -EINVAL;
+//	}
 
 	/* The slot number should be >= 2 if using Network mode or I2S mode */
 	if (ssi->i2s_net && slots < 2) {
@@ -1065,8 +1084,8 @@ static int fsl_ssi_set_dai_tdm_slot(struct snd_soc_dai *dai, u32 tx_mask,
 	/* Restore the value of SSIEN bit */
 	regmap_update_bits(regs, REG_SSI_SCR, SSI_SCR_SSIEN, val);
 
-	ssi->slot_width = slot_width;
-	ssi->slots = slots;
+//	ssi->slot_width = slot_width;
+//	ssi->slots = slots;
 
 	return 0;
 }
@@ -1130,6 +1149,7 @@ static const struct snd_soc_dai_ops fsl_ssi_dai_ops = {
 	.hw_params = fsl_ssi_hw_params,
 	.hw_free = fsl_ssi_hw_free,
 	.set_fmt = fsl_ssi_set_dai_fmt,
+        .set_sysclk     = fsl_ssi_set_dai_sysclk,
 	.set_tdm_slot = fsl_ssi_set_dai_tdm_slot,
 	.trigger = fsl_ssi_trigger,
 };
-- 
2.17.1


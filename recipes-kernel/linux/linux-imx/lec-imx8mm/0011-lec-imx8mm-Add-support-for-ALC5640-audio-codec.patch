From 3bf50e05dd0e586b1a1782a0474061beed196836 Mon Sep 17 00:00:00 2001
From: Dinesh V <dinesh.v@adlinktech.com>
Date: Thu, 5 Oct 2023 23:14:54 +0530
Subject: [PATCH 11/11] lec-imx8mm-Add-support-for-ALC5640-audio-codec

---
 sound/soc/fsl/Kconfig      |  13 ++
 sound/soc/fsl/Makefile     |   2 +
 sound/soc/fsl/imx-rt5640.c | 379 +++++++++++++++++++++++++++++++++++++
 3 files changed, 394 insertions(+)
 create mode 100644 sound/soc/fsl/imx-rt5640.c

diff --git a/sound/soc/fsl/Kconfig b/sound/soc/fsl/Kconfig
index 9c8a07ba5695..e78107b1846e 100644
--- a/sound/soc/fsl/Kconfig
+++ b/sound/soc/fsl/Kconfig
@@ -294,6 +294,19 @@ config SND_SOC_IMX_WM8960
 	  Say Y if you want to add support for SoC audio on an i.MX board with
 	  a wm8960 codec.
 
+config SND_SOC_IMX_RT5640
+	tristate "SoC Audio support for i.MX boards with rt5640"
+	depends on OF && I2C
+	select SND_SOC_RT5640
+	select SND_SOC_IMX_PCM_DMA
+	select SND_SOC_FSL_SAI
+	select SND_SOC_FSL_UTILS
+	select SND_KCTL_JACK
+	help
+	  SoC Audio support for i.MX boards with RT5640
+	  Say Y if you want to add support for SoC audio on an i.MX board with
+	  a rt5640 codec.
+
 config SND_SOC_IMX_ES8328
 	tristate "SoC Audio support for i.MX boards with the ES8328 codec"
 	depends on OF && (I2C || SPI)
diff --git a/sound/soc/fsl/Makefile b/sound/soc/fsl/Makefile
index e460453ae87f..9d926be7e886 100644
--- a/sound/soc/fsl/Makefile
+++ b/sound/soc/fsl/Makefile
@@ -73,6 +73,7 @@ snd-soc-eukrea-tlv320-objs := eukrea-tlv320.o
 snd-soc-imx-es8328-objs := imx-es8328.o
 snd-soc-imx-sgtl5000-objs := imx-sgtl5000.o
 snd-soc-imx-wm8960-objs := imx-wm8960.o
+snd-soc-imx-rt5640-objs := imx-rt5640.o
 snd-soc-imx-spdif-objs := imx-spdif.o
 snd-soc-imx-audmix-objs := imx-audmix.o
 snd-soc-imx-hdmi-objs := imx-hdmi.o
@@ -87,6 +88,7 @@ obj-$(CONFIG_SND_SOC_IMX_ES8328) += snd-soc-imx-es8328.o
 obj-$(CONFIG_SND_SOC_IMX_SGTL5000) += snd-soc-imx-sgtl5000.o
 
 obj-$(CONFIG_SND_SOC_IMX_WM8960) += snd-soc-imx-wm8960.o
+obj-$(CONFIG_SND_SOC_IMX_RT5640) += snd-soc-imx-rt5640.o
 obj-$(CONFIG_SND_SOC_IMX_SPDIF) += snd-soc-imx-spdif.o
 obj-$(CONFIG_SND_SOC_IMX_AUDMIX) += snd-soc-imx-audmix.o
 obj-$(CONFIG_SND_SOC_IMX_HDMI) += snd-soc-imx-hdmi.o
diff --git a/sound/soc/fsl/imx-rt5640.c b/sound/soc/fsl/imx-rt5640.c
new file mode 100644
index 000000000000..dec5c727cbe8
--- /dev/null
+++ b/sound/soc/fsl/imx-rt5640.c
@@ -0,0 +1,379 @@
+/*
+ * Copyright (C) 2015-2016 Freescale Semiconductor, Inc.
+ *
++ * The code contained herein is licensed under the GNU General Public
+ * License. You may obtain a copy of the GNU General Public License
+ * Version 2 or later at the following locations:
+ *
+ * http://www.opensource.org/licenses/gpl-license.html
+ * http://www.gnu.org/copyleft/gpl.html
+ */
+
+#include <linux/module.h>
+#include <linux/of_platform.h>
+#include <linux/i2c.h>
+#include <linux/of_gpio.h>
+#include <linux/slab.h>
+#include <linux/gpio.h>
+#include <linux/clk.h>
+#include <sound/soc.h>
+#include <sound/jack.h>
+#include <sound/control.h>
+#include <sound/pcm_params.h>
+#include <sound/soc-dapm.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/mfd/syscon.h>
+#include "../fsl/fsl_sai.h"
+#include "../codecs/rt5640.h"
+
+struct imx_rt5640_data {
+	struct platform_device *pdev;
+	struct platform_device *asrc_pdev;
+	struct snd_soc_card card;
+	struct clk *codec_clk;
+	bool is_codec_master;
+	bool is_playback_only;
+	bool is_capture_only;
+	bool is_stream_in_use[2];
+	bool is_stream_opened[2];
+	u32 asrc_rate;
+	u32 asrc_format;
+	struct snd_soc_dai_link imx_rt5640_dai[3];
+};
+
+static const struct snd_soc_dapm_widget imx_rt5640_dapm_widgets[] = {
+	SND_SOC_DAPM_MIC("Microphone", NULL),
+	SND_SOC_DAPM_MIC("Mic Jack", NULL),
+	SND_SOC_DAPM_HP("Headphone", NULL),
+	SND_SOC_DAPM_HP("Headphone Jack", NULL),
+};
+
+static int imx_hifi_hw_params(struct snd_pcm_substream *substream,
+				     struct snd_pcm_hw_params *params)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_dai *codec_dai = asoc_rtd_to_codec(rtd, 0);
+	struct snd_soc_dai *cpu_dai = asoc_rtd_to_cpu(rtd, 0);
+	struct snd_soc_card *card = rtd->card;
+	struct imx_rt5640_data *data = snd_soc_card_get_drvdata(card);
+	bool tx = substream->stream == SNDRV_PCM_STREAM_PLAYBACK;
+	struct device *dev = card->dev;
+	unsigned int sample_rate = params_rate(params);
+	unsigned int fmt;
+	int ret = 0;
+
+	data->is_stream_in_use[tx] = true;
+
+	if (data->is_stream_in_use[!tx])
+		return 0;
+
+	if (data->is_codec_master)
+		fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+			SND_SOC_DAIFMT_CBM_CFM;
+	else
+		fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+			SND_SOC_DAIFMT_CBS_CFS;
+
+	/* set cpu DAI configuration */
+	ret = snd_soc_dai_set_fmt(cpu_dai, fmt);
+	if (ret) {
+		dev_err(dev, "failed to set cpu dai fmt: %d\n", ret);
+		return ret;
+	}
+	/* set codec DAI configuration */
+	ret = snd_soc_dai_set_fmt(codec_dai, fmt);
+	if (ret) {
+		dev_err(dev, "failed to set codec dai fmt: %d\n", ret);
+		return ret;
+	}
+
+	if (!data->is_codec_master) {
+		int mclk = sample_rate * 256;
+
+		ret = snd_soc_dai_set_tdm_slot(cpu_dai, 0, 0, 2, params_width(params));
+		if (ret) {
+			dev_err(dev, "failed to set cpu dai tdm slot: %d\n", ret);
+			return ret;
+		}
+
+		ret = snd_soc_dai_set_sysclk(cpu_dai, FSL_SAI_CLK_MAST1, mclk,
+                                     SND_SOC_CLOCK_OUT);
+		if (ret) {
+			dev_err(dev, "failed to set cpu sysclk: %d\n", ret);
+			return ret;
+		}
+
+		ret = snd_soc_dai_set_sysclk(codec_dai, RT5640_SCLK_S_MCLK, mclk,
+				SND_SOC_CLOCK_IN);
+		if (ret < 0) {
+			dev_err(card->dev, "codec_dai clock not set\n");
+			return ret;
+		}
+	} else {
+		ret = snd_soc_dai_set_sysclk(cpu_dai, 0, 0, SND_SOC_CLOCK_IN);
+		if (ret) {
+			dev_err(dev, "failed to set cpu sysclk: %d\n", ret);
+			return ret;
+		}
+	}
+
+	return ret;
+}
+
+static int imx_hifi_hw_free(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_dai *codec_dai = asoc_rtd_to_codec(rtd, 0);
+	struct snd_soc_card *card = rtd->card;
+	struct imx_rt5640_data *data = snd_soc_card_get_drvdata(card);
+	bool tx = substream->stream == SNDRV_PCM_STREAM_PLAYBACK;
+	struct device *dev = card->dev;
+	int ret;
+
+	data->is_stream_in_use[tx] = false;
+
+	if (data->is_codec_master && !data->is_stream_in_use[!tx]) {
+		ret = snd_soc_dai_set_fmt(codec_dai, SND_SOC_DAIFMT_CBS_CFS | SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF);
+		if (ret)
+			dev_warn(dev, "failed to set codec dai fmt: %d\n", ret);
+	}
+
+	return 0;
+}
+
+static u32 imx_rt5640_rates[] = { 8000, 16000, 32000, 48000 };
+static struct snd_pcm_hw_constraint_list imx_rt5640_rate_constraints = {
+	.count = ARRAY_SIZE(imx_rt5640_rates),
+	.list = imx_rt5640_rates,
+};
+
+static int imx_hifi_startup(struct snd_pcm_substream *substream)
+{
+	bool tx = substream->stream == SNDRV_PCM_STREAM_PLAYBACK;
+	int ret = 0;
+
+	if (!tx)
+		ret = snd_pcm_hw_constraint_list(substream->runtime, 0,
+			SNDRV_PCM_HW_PARAM_RATE, &imx_rt5640_rate_constraints);
+	else
+		ret = snd_pcm_hw_constraint_list(substream->runtime, 0,
+			SNDRV_PCM_HW_PARAM_RATE, &imx_rt5640_rate_constraints);
+	return ret;
+}
+
+static void imx_hifi_shutdown(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_card *card = rtd->card;
+	struct imx_rt5640_data *data = snd_soc_card_get_drvdata(card);
+	bool tx = substream->stream == SNDRV_PCM_STREAM_PLAYBACK;
+
+	data->is_stream_opened[tx] = false;
+}
+
+static struct snd_soc_ops imx_hifi_ops = {
+	.hw_params = imx_hifi_hw_params,
+	.hw_free = imx_hifi_hw_free,
+	.startup   = imx_hifi_startup,
+	.shutdown  = imx_hifi_shutdown,
+};
+
+static int be_hw_params_fixup(struct snd_soc_pcm_runtime *rtd,
+			struct snd_pcm_hw_params *params)
+{
+	struct snd_soc_card *card = rtd->card;
+	struct imx_rt5640_data *data = snd_soc_card_get_drvdata(card);
+	struct snd_interval *rate;
+	struct snd_mask *mask;
+
+	if (!data->asrc_pdev)
+		return -EINVAL;
+
+	rate = hw_param_interval(params, SNDRV_PCM_HW_PARAM_RATE);
+	rate->max = rate->min = data->asrc_rate;
+
+	mask = hw_param_mask(params, SNDRV_PCM_HW_PARAM_FORMAT);
+	snd_mask_none(mask);
+	snd_mask_set(mask, data->asrc_format);
+
+	return 0;
+}
+
+SND_SOC_DAILINK_DEFS(hifi,
+	DAILINK_COMP_ARRAY(COMP_EMPTY()),
+	DAILINK_COMP_ARRAY(COMP_CODEC(NULL, "rt5640-aif1")),
+	DAILINK_COMP_ARRAY(COMP_EMPTY()));
+
+SND_SOC_DAILINK_DEFS(hifi_fe,
+	DAILINK_COMP_ARRAY(COMP_EMPTY()),
+	DAILINK_COMP_ARRAY(COMP_DUMMY()),
+	DAILINK_COMP_ARRAY(COMP_EMPTY()));
+
+SND_SOC_DAILINK_DEFS(hifi_be,
+	DAILINK_COMP_ARRAY(COMP_EMPTY()),
+	DAILINK_COMP_ARRAY(COMP_CODEC(NULL, "rt5640-aif1")),
+	DAILINK_COMP_ARRAY(COMP_DUMMY()));
+
+static int imx_rt5640_probe(struct platform_device *pdev)
+{
+	struct device_node *cpu_np = NULL, *codec_np = NULL;
+	struct platform_device *cpu_pdev;
+	struct i2c_client *codec_dev;
+	struct imx_rt5640_data *data;
+	struct platform_device *asrc_pdev = NULL;
+	int ret;
+
+	data = devm_kzalloc(&pdev->dev, sizeof(*data), GFP_KERNEL);
+	if (!data) {
+		ret = -ENOMEM;
+		goto fail;
+	}
+
+	data->pdev = pdev;
+
+	cpu_np = of_parse_phandle(pdev->dev.of_node, "cpu-dai", 0);
+	if (!cpu_np) {
+		dev_err(&pdev->dev, "cpu dai phandle missing or invalid\n");
+		ret = -EINVAL;
+		goto fail;
+	}
+
+	cpu_pdev = of_find_device_by_node(cpu_np);
+	if (!cpu_pdev) {
+		dev_err(&pdev->dev, "failed to find SAI platform device\n");
+		ret = -EINVAL;
+		goto fail;
+	}
+
+	codec_np = of_parse_phandle(pdev->dev.of_node, "audio-codec", 0);
+	if (!codec_np) {
+		dev_err(&pdev->dev, "phandle missing or invalid\n");
+		ret = -EINVAL;
+		goto fail;
+	}
+
+	codec_dev = of_find_i2c_device_by_node(codec_np);
+	if (!codec_dev || !codec_dev->dev.driver) {
+		dev_dbg(&pdev->dev, "failed to find codec platform device\n");
+		ret = -EPROBE_DEFER;
+		goto fail;
+	}
+
+	data->codec_clk = devm_clk_get(&codec_dev->dev, "mclk");
+	if (IS_ERR(data->codec_clk)) {
+		ret = PTR_ERR(data->codec_clk);
+		dev_err(&pdev->dev, "failed to get codec clk: %d\n", ret);
+		goto fail;
+	}
+
+	if (of_property_read_bool(pdev->dev.of_node, "codec-master"))
+		data->is_codec_master = true;
+
+	if (of_property_read_bool(pdev->dev.of_node, "capture-only"))
+		data->is_capture_only = true;
+
+	if (of_property_read_bool(pdev->dev.of_node, "playback-only"))
+		data->is_playback_only = true;
+
+	data->imx_rt5640_dai[0].name = "HiFi";
+	data->imx_rt5640_dai[0].stream_name = "HiFi";
+	data->imx_rt5640_dai[0].ops = &imx_hifi_ops;
+	data->imx_rt5640_dai[0].cpus = hifi_cpus;
+	data->imx_rt5640_dai[0].num_cpus = ARRAY_SIZE(hifi_cpus);
+	data->imx_rt5640_dai[0].codecs = hifi_codecs;
+	data->imx_rt5640_dai[0].num_codecs = ARRAY_SIZE(hifi_codecs);
+	data->imx_rt5640_dai[0].platforms = hifi_platforms;
+	data->imx_rt5640_dai[0].num_platforms = ARRAY_SIZE(hifi_platforms);
+
+	data->imx_rt5640_dai[1].name = "HiFi-ASRC-FE";
+	data->imx_rt5640_dai[1].stream_name = "HiFi-ASRC-FE";
+	data->imx_rt5640_dai[1].dynamic = 1;
+	data->imx_rt5640_dai[1].ignore_pmdown_time = 1;
+	data->imx_rt5640_dai[1].dpcm_playback = 1;
+	data->imx_rt5640_dai[1].dpcm_capture = 1;
+	data->imx_rt5640_dai[1].dpcm_merged_chan = 1;
+	data->imx_rt5640_dai[1].cpus = hifi_fe_cpus;
+	data->imx_rt5640_dai[1].num_cpus = ARRAY_SIZE(hifi_fe_cpus);
+	data->imx_rt5640_dai[1].codecs = hifi_fe_codecs;
+	data->imx_rt5640_dai[1].num_codecs = ARRAY_SIZE(hifi_fe_codecs);
+	data->imx_rt5640_dai[1].platforms = hifi_fe_platforms;
+	data->imx_rt5640_dai[1].num_platforms = ARRAY_SIZE(hifi_fe_platforms);
+
+	data->imx_rt5640_dai[2].name = "HiFi-ASRC-BE";
+	data->imx_rt5640_dai[2].stream_name = "HiFi-ASRC-BE";
+	data->imx_rt5640_dai[2].no_pcm = 1;
+	data->imx_rt5640_dai[2].ignore_pmdown_time = 1;
+	data->imx_rt5640_dai[2].dpcm_playback = 1;
+	data->imx_rt5640_dai[2].dpcm_capture = 1;
+	data->imx_rt5640_dai[2].ops = &imx_hifi_ops;
+	data->imx_rt5640_dai[2].be_hw_params_fixup = be_hw_params_fixup;
+	data->imx_rt5640_dai[2].cpus = hifi_be_cpus;
+	data->imx_rt5640_dai[2].num_cpus = ARRAY_SIZE(hifi_be_cpus);
+	data->imx_rt5640_dai[2].codecs = hifi_be_codecs;
+	data->imx_rt5640_dai[2].num_codecs = ARRAY_SIZE(hifi_be_codecs);
+	data->imx_rt5640_dai[2].platforms = hifi_be_platforms;
+	data->imx_rt5640_dai[2].num_platforms = ARRAY_SIZE(hifi_be_platforms);
+
+	data->card.dai_link = data->imx_rt5640_dai;
+
+	data->imx_rt5640_dai[0].codecs->of_node	= codec_np;
+	data->imx_rt5640_dai[0].cpus->dai_name = dev_name(&cpu_pdev->dev);
+	data->imx_rt5640_dai[0].platforms->of_node = cpu_np;
+
+	if (!asrc_pdev) {
+		data->card.num_links = 1;
+	}
+	data->card.dev = &pdev->dev;
+	data->card.owner = THIS_MODULE;
+	ret = snd_soc_of_parse_card_name(&data->card, "model");
+	if (ret)
+		goto fail;
+	data->card.dapm_widgets = imx_rt5640_dapm_widgets;
+	data->card.num_dapm_widgets = ARRAY_SIZE(imx_rt5640_dapm_widgets);
+
+	ret = snd_soc_of_parse_audio_routing(&data->card, "audio-routing");
+	if (ret)
+		goto fail;
+
+	snd_soc_card_set_drvdata(&data->card, data);
+	ret = devm_snd_soc_register_card(&pdev->dev, &data->card);
+	if (ret) {
+		dev_err(&pdev->dev, "snd_soc_register_card failed (%d)\n", ret);
+		goto fail;
+	}
+
+fail:
+	if (cpu_np)
+		of_node_put(cpu_np);
+	if (codec_np)
+		of_node_put(codec_np);
+
+	return ret;
+}
+
+static int imx_rt5640_remove(struct platform_device *pdev)
+{
+	return 0;
+}
+
+static const struct of_device_id imx_rt5640_dt_ids[] = {
+	{ .compatible = "fsl,imx-audio-rt5640", },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, imx_rt5640_dt_ids);
+
+static struct platform_driver imx_rt5640_driver = {
+	.driver = {
+		.name = "imx-rt5640",
+		.pm = &snd_soc_pm_ops,
+		.of_match_table = imx_rt5640_dt_ids,
+	},
+	.probe = imx_rt5640_probe,
+	.remove = imx_rt5640_remove,
+};
+module_platform_driver(imx_rt5640_driver);
+
+MODULE_AUTHOR("Freescale Semiconductor, Inc.");
+MODULE_DESCRIPTION("Freescale i.MX RT5640 ASoC machine driver");
+MODULE_LICENSE("GPL v2");
+MODULE_ALIAS("platform:imx-rt5640");
-- 
2.25.1


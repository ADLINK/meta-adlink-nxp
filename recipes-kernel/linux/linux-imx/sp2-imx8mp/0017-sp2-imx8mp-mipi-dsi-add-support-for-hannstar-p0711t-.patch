From 6cbadfcaf73ff40c1723d85b89a2444691fbaf08 Mon Sep 17 00:00:00 2001
From: "po.cheng" <po.cheng@adlinktech.com>
Date: Wed, 12 Jun 2024 11:49:15 +0800
Subject: [PATCH 1/2] sp2-imx8mp: mipi-dsi: add support for hannstar p0711t 7.8
 reflective lcd

Signed-off-by: po.cheng <po.cheng@adlinktech.com>
---
 drivers/gpu/drm/panel/panel-ilitek-ili9881c.c | 234 ++++++++++++++++++
 1 file changed, 234 insertions(+)

diff --git a/drivers/gpu/drm/panel/panel-ilitek-ili9881c.c b/drivers/gpu/drm/panel/panel-ilitek-ili9881c.c
index 1ca114eda1ba8..ae79b82b8c3af 100644
--- a/drivers/gpu/drm/panel/panel-ilitek-ili9881c.c
+++ b/drivers/gpu/drm/panel/panel-ilitek-ili9881c.c
@@ -646,6 +646,215 @@ static const struct ili9881c_instr am_8001280gtzqw_init[] = {
 	ILI9881C_COMMAND_INSTR(0x35, 0x00),
 };
 
+
+static const struct ili9881c_instr hsd_p0711t_init[] = {
+	// CMD_Page 3
+	ILI9881C_SWITCH_PAGE_INSTR(3),
+	//=========GIP_1===========//
+	ILI9881C_COMMAND_INSTR(0x01, 0x00),
+	ILI9881C_COMMAND_INSTR(0x02, 0x00),
+	ILI9881C_COMMAND_INSTR(0x03, 0x54), //STVA Width 5H
+	ILI9881C_COMMAND_INSTR(0x04, 0x14), //STVB Width 5H
+	ILI9881C_COMMAND_INSTR(0x05, 0xD4), //STVC Width 5H
+	ILI9881C_COMMAND_INSTR(0x06, 0x08), //STVA Rise start
+	ILI9881C_COMMAND_INSTR(0x07, 0x01), //STVB Rise start
+	ILI9881C_COMMAND_INSTR(0x08, 0x0E), //STVC Rise start
+	ILI9881C_COMMAND_INSTR(0x09, 0x00),
+	ILI9881C_COMMAND_INSTR(0x0A, 0x00),
+	ILI9881C_COMMAND_INSTR(0x0B, 0x00),
+	ILI9881C_COMMAND_INSTR(0x0C, 0x00),
+	ILI9881C_COMMAND_INSTR(0x0D, 0x00),
+	ILI9881C_COMMAND_INSTR(0x0E, 0x00),
+	ILI9881C_COMMAND_INSTR(0x0F, 0x00),
+	ILI9881C_COMMAND_INSTR(0x10, 0x00),
+	ILI9881C_COMMAND_INSTR(0x11, 0x00),
+	ILI9881C_COMMAND_INSTR(0x12, 0x00),
+	ILI9881C_COMMAND_INSTR(0x13, 0x00),
+	ILI9881C_COMMAND_INSTR(0x14, 0x00),
+	ILI9881C_COMMAND_INSTR(0x15, 0x00),
+	ILI9881C_COMMAND_INSTR(0x16, 0x00),
+	ILI9881C_COMMAND_INSTR(0x17, 0x00),
+	ILI9881C_COMMAND_INSTR(0x18, 0x00),
+	ILI9881C_COMMAND_INSTR(0x19, 0x00),
+	ILI9881C_COMMAND_INSTR(0x1A, 0x00),
+	ILI9881C_COMMAND_INSTR(0x1B, 0x00),
+	ILI9881C_COMMAND_INSTR(0x1C, 0x00),
+	ILI9881C_COMMAND_INSTR(0x1D, 0x00),
+	ILI9881C_COMMAND_INSTR(0x1E, 0x44),
+	ILI9881C_COMMAND_INSTR(0x1F, 0x80),
+	ILI9881C_COMMAND_INSTR(0x20, 0x03), //CLKA Rise STA
+	ILI9881C_COMMAND_INSTR(0x21, 0x04), //CLKA FALL END
+	ILI9881C_COMMAND_INSTR(0x22, 0x00),
+	ILI9881C_COMMAND_INSTR(0x23, 0x00),
+	ILI9881C_COMMAND_INSTR(0x24, 0x00),
+	ILI9881C_COMMAND_INSTR(0x25, 0x00),
+	ILI9881C_COMMAND_INSTR(0x26, 0x00),
+	ILI9881C_COMMAND_INSTR(0x27, 0x00),
+	ILI9881C_COMMAND_INSTR(0x28, 0x77), //CLK_x_NumB[2:0]  Phase_CLK[2:0]
+	ILI9881C_COMMAND_INSTR(0x29, 0x04), //Overlap_CLK[3:0] 5H
+	ILI9881C_COMMAND_INSTR(0x2A, 0x00),
+	ILI9881C_COMMAND_INSTR(0x2B, 0x00),
+	ILI9881C_COMMAND_INSTR(0x2C, 0x00),
+	ILI9881C_COMMAND_INSTR(0x2D, 0x00),
+	ILI9881C_COMMAND_INSTR(0x2E, 0x00),
+	ILI9881C_COMMAND_INSTR(0x2F, 0x00),
+	ILI9881C_COMMAND_INSTR(0x30, 0x00),
+	ILI9881C_COMMAND_INSTR(0x31, 0x00),
+	ILI9881C_COMMAND_INSTR(0x32, 0x00),
+	ILI9881C_COMMAND_INSTR(0x33, 0x00),
+	ILI9881C_COMMAND_INSTR(0x34, 0x04), //GPW1/2 non Overlap time 2.62us
+	ILI9881C_COMMAND_INSTR(0x35, 0x00),
+	ILI9881C_COMMAND_INSTR(0x36, 0x00),
+	ILI9881C_COMMAND_INSTR(0x37, 0x00),
+	ILI9881C_COMMAND_INSTR(0x38, 0x3C), //FOR GPW1/2 Cycle 2 s
+	ILI9881C_COMMAND_INSTR(0x39, 0x00),
+	ILI9881C_COMMAND_INSTR(0x3A, 0x40),
+	ILI9881C_COMMAND_INSTR(0x3B, 0x40),
+	ILI9881C_COMMAND_INSTR(0x3C, 0x00),
+	ILI9881C_COMMAND_INSTR(0x3D, 0x00),
+	ILI9881C_COMMAND_INSTR(0x3E, 0x00),
+	ILI9881C_COMMAND_INSTR(0x3F, 0x00),
+	ILI9881C_COMMAND_INSTR(0x40, 0x00),
+	ILI9881C_COMMAND_INSTR(0x41, 0x00),
+	ILI9881C_COMMAND_INSTR(0x42, 0x00),
+	ILI9881C_COMMAND_INSTR(0x43, 0x00),
+	ILI9881C_COMMAND_INSTR(0x44, 0x00),
+	//=========GIP_2===========//
+	ILI9881C_COMMAND_INSTR(0x50, 0x01),
+	ILI9881C_COMMAND_INSTR(0x51, 0x23),
+	ILI9881C_COMMAND_INSTR(0x52, 0x45),
+	ILI9881C_COMMAND_INSTR(0x53, 0x67),
+	ILI9881C_COMMAND_INSTR(0x54, 0x89),
+	ILI9881C_COMMAND_INSTR(0x55, 0xAB),
+	ILI9881C_COMMAND_INSTR(0x56, 0x01),
+	ILI9881C_COMMAND_INSTR(0x57, 0x23),
+	ILI9881C_COMMAND_INSTR(0x58, 0x45),
+	ILI9881C_COMMAND_INSTR(0x59, 0x67),
+	ILI9881C_COMMAND_INSTR(0x5A, 0x89),
+	ILI9881C_COMMAND_INSTR(0x5B, 0xAB),
+	ILI9881C_COMMAND_INSTR(0x5C, 0xCD),
+	ILI9881C_COMMAND_INSTR(0x5D, 0xEF),
+	//=========GIP_3===========//
+	ILI9881C_COMMAND_INSTR(0x5E, 0x11),
+	ILI9881C_COMMAND_INSTR(0x5F, 0x01), //FW_GOUT_L1   FW
+	ILI9881C_COMMAND_INSTR(0x60, 0x00), //FW_GOUT_L2   BW
+	ILI9881C_COMMAND_INSTR(0x61, 0x08), //FW_GOUT_L3   STV2_R
+	ILI9881C_COMMAND_INSTR(0x62, 0x0A), //FW_GOUT_L4   STV3_R
+	ILI9881C_COMMAND_INSTR(0x63, 0x15), //FW_GOUT_L5   GPW1_R
+	ILI9881C_COMMAND_INSTR(0x64, 0x14), //FW_GOUT_L6   GPW2_R
+	ILI9881C_COMMAND_INSTR(0x65, 0x0C), //FW_GOUT_L7   CLK1_R
+	ILI9881C_COMMAND_INSTR(0x66, 0x0D), //FW_GOUT_L8   CLK2_R
+	ILI9881C_COMMAND_INSTR(0x67, 0x0E), //FW_GOUT_L9   CLK3_R
+	ILI9881C_COMMAND_INSTR(0x68, 0x0F), //FW_GOUT_L10  CLK4_R
+	ILI9881C_COMMAND_INSTR(0x69, 0x10), //FW_GOUT_L11  CLK5_R
+	ILI9881C_COMMAND_INSTR(0x6A, 0x11), //FW_GOUT_L12  CLK6_R
+	ILI9881C_COMMAND_INSTR(0x6B, 0x12), //FW_GOUT_L13  CLK7_R
+	ILI9881C_COMMAND_INSTR(0x6C, 0x13), //FW_GOUT_L14  CLK8_R
+	ILI9881C_COMMAND_INSTR(0x6D, 0x06), //FW_GOUT_L15  STV1_R
+	ILI9881C_COMMAND_INSTR(0x6E, 0x02), //FW_GOUT_L16
+	ILI9881C_COMMAND_INSTR(0x6F, 0x02), //FW_GOUT_L17  VGL
+	ILI9881C_COMMAND_INSTR(0x70, 0x02), //FW_GOUT_L18  VGL
+	ILI9881C_COMMAND_INSTR(0x71, 0x02), //FW_GOUT_L19  VGL
+	ILI9881C_COMMAND_INSTR(0x72, 0x02), //FW_GOUT_L20
+	ILI9881C_COMMAND_INSTR(0x73, 0x02), //FW_GOUT_L21
+	ILI9881C_COMMAND_INSTR(0x74, 0x02), //FW_GOUT_L22
+	ILI9881C_COMMAND_INSTR(0x75, 0x01), //BW_GOUT_L1   FW
+	ILI9881C_COMMAND_INSTR(0x76, 0x00), //BW_GOUT_L2   BW
+	ILI9881C_COMMAND_INSTR(0x77, 0x06), //BW_GOUT_L3   STV2_R
+	ILI9881C_COMMAND_INSTR(0x78, 0x0A), //BW_GOUT_L4   STV3_R
+	ILI9881C_COMMAND_INSTR(0x79, 0x15), //BW_GOUT_L5   GPW1_R
+	ILI9881C_COMMAND_INSTR(0x7A, 0x14), //BW_GOUT_L6   GPW2_R
+	ILI9881C_COMMAND_INSTR(0x7B, 0x0C), //BW_GOUT_L7   CLK1_R
+	ILI9881C_COMMAND_INSTR(0x7C, 0x0D), //BW_GOUT_L8   CLK2_R
+	ILI9881C_COMMAND_INSTR(0x7D, 0x0E), //BW_GOUT_L9   CLK3_R
+	ILI9881C_COMMAND_INSTR(0x7E, 0x0F), //BW_GOUT_L10  CLK4_R
+	ILI9881C_COMMAND_INSTR(0x7F, 0x10), //BW_GOUT_L11  CLK5_R
+	ILI9881C_COMMAND_INSTR(0x80, 0x11), //BW_GOUT_L12  CLK6_R
+	ILI9881C_COMMAND_INSTR(0x81, 0x12), //BW_GOUT_L13  CLK7_R
+	ILI9881C_COMMAND_INSTR(0x82, 0x13), //BW_GOUT_L14  CLK8_R
+	ILI9881C_COMMAND_INSTR(0x83, 0x08), //BW_GOUT_L15  STV1_R
+	ILI9881C_COMMAND_INSTR(0x84, 0x02), //BW_GOUT_L16
+	ILI9881C_COMMAND_INSTR(0x85, 0x02), //BW_GOUT_L17  VGL
+	ILI9881C_COMMAND_INSTR(0x86, 0x02), //BW_GOUT_L18  VGL
+	ILI9881C_COMMAND_INSTR(0x87, 0x02), //BW_GOUT_L19  VGL
+	ILI9881C_COMMAND_INSTR(0x88, 0x02), //BW_GOUT_L20
+	ILI9881C_COMMAND_INSTR(0x89, 0x02), //BW_GOUT_L21
+	ILI9881C_COMMAND_INSTR(0x8A, 0x02), //BW_GOUT_L22
+	// CMD_Page 4
+	ILI9881C_SWITCH_PAGE_INSTR(4),
+	ILI9881C_COMMAND_INSTR(0x6C, 0x15), //SEt VCORE voltAgE =1.5V
+	ILI9881C_COMMAND_INSTR(0x6E, 0x3B), //di_pwr_reg=0 For power mode 2A //VGH Clamp 18.06V
+	ILI9881C_COMMAND_INSTR(0x6F, 0x33), //Reg vCl + pumping ratio VGH=3x VGL=-2x
+	ILI9881C_COMMAND_INSTR(0x3A, 0x24), //POWER SAVING
+	ILI9881C_COMMAND_INSTR(0x8D, 0x14), //VGL -10.05V
+	ILI9881C_COMMAND_INSTR(0x87, 0xBA), //ESD
+	ILI9881C_COMMAND_INSTR(0x26, 0x76),
+	ILI9881C_COMMAND_INSTR(0xB2, 0xD1),
+	ILI9881C_COMMAND_INSTR(0xB5, 0x27), //GMA BIAS
+	ILI9881C_COMMAND_INSTR(0x31, 0x75), //SRC BIAS
+	ILI9881C_COMMAND_INSTR(0x30, 0x03), //SRC OUTPUT BIAS
+	ILI9881C_COMMAND_INSTR(0x3B, 0x98), //PUMP SHIFT CLK
+	ILI9881C_COMMAND_INSTR(0x35, 0x1F), //HZ_opt 0426
+	ILI9881C_COMMAND_INSTR(0x33, 0x14), //Blanking Frame set to GND
+	ILI9881C_COMMAND_INSTR(0x7A, 0x0F),
+	ILI9881C_COMMAND_INSTR(0x38, 0x02),
+	ILI9881C_COMMAND_INSTR(0x39, 0x00),
+	ILI9881C_COMMAND_INSTR(0x7A, 0x10), //VLC measure setup
+	// CMD_Page 1
+	ILI9881C_SWITCH_PAGE_INSTR(1),
+	ILI9881C_COMMAND_INSTR(0x22, 0x0E),	//BGR,Normail Black, SS
+	ILI9881C_COMMAND_INSTR(0x2E, 0x88),	//RS[1:0]=01;768x(480+4xNL);NL=136
+	ILI9881C_COMMAND_INSTR(0x31, 0x02),	//00:Column  01:1dot 02:2dot inversion
+	ILI9881C_COMMAND_INSTR(0x52, 0x00),	//VCOM1
+	ILI9881C_COMMAND_INSTR(0x53, 0x1A),	//VCOM1
+	ILI9881C_COMMAND_INSTR(0x54, 0x00),	//VCOM2
+	ILI9881C_COMMAND_INSTR(0x55, 0x1A), //VCOM2
+	ILI9881C_COMMAND_INSTR(0x50, 0x42),	//VREG1OUT=3.504V(0x42)  4V(0x6B)
+	ILI9881C_COMMAND_INSTR(0x51, 0x42), //VREG2OUT=-3.504V0x42)  -4V(0x6B)
+	ILI9881C_COMMAND_INSTR(0x60, 0x1F), //SDT=2.5
+	ILI9881C_COMMAND_INSTR(0x63, 0x00),
+	ILI9881C_COMMAND_INSTR(0xA0, 0x08), //VP255	  0 Gamma P
+	ILI9881C_COMMAND_INSTR(0xA1, 0x20), //VP251   4
+	ILI9881C_COMMAND_INSTR(0xA2, 0x26), //VP247   8
+	ILI9881C_COMMAND_INSTR(0xA3, 0x10), //VP243   12
+	ILI9881C_COMMAND_INSTR(0xA4, 0x10), //VP239   16
+	ILI9881C_COMMAND_INSTR(0xA5, 0x16), //VP231   24      22
+	ILI9881C_COMMAND_INSTR(0xA6, 0x10), //VP219   36      18
+	ILI9881C_COMMAND_INSTR(0xA7, 0x16), //VP203   52      20
+	ILI9881C_COMMAND_INSTR(0xA8, 0x60), //VP175   80
+	ILI9881C_COMMAND_INSTR(0xA9, 0x1C), //VP144   111
+	ILI9881C_COMMAND_INSTR(0xAA, 0x26), //VP111   144
+	ILI9881C_COMMAND_INSTR(0xAB, 0x61), //VP80    175
+	ILI9881C_COMMAND_INSTR(0xAC, 0x28), //VP52    203     1A
+	ILI9881C_COMMAND_INSTR(0xAD, 0x24), //VP36    219     12
+	ILI9881C_COMMAND_INSTR(0xAE, 0x52), //VP24    231
+	ILI9881C_COMMAND_INSTR(0xAF, 0x27), //VP16    239
+	ILI9881C_COMMAND_INSTR(0xB0, 0x2B), //VP12    243
+	ILI9881C_COMMAND_INSTR(0xB1, 0x36), //VP8     247
+	ILI9881C_COMMAND_INSTR(0xB2, 0x63), //VP4     251
+	ILI9881C_COMMAND_INSTR(0xB3, 0x39), //VP0     255
+	ILI9881C_COMMAND_INSTR(0xC0, 0x08), //VN255  0 GAMMA N
+	ILI9881C_COMMAND_INSTR(0xC1, 0x20), //VN251  4
+	ILI9881C_COMMAND_INSTR(0xC2, 0x26), //VN247  8
+	ILI9881C_COMMAND_INSTR(0xC3, 0x10), //VN243  12
+	ILI9881C_COMMAND_INSTR(0xC4, 0x10), //VN239  16
+	ILI9881C_COMMAND_INSTR(0xC5, 0x16), //VN231  24
+	ILI9881C_COMMAND_INSTR(0xC6, 0x10), //VN219  36
+	ILI9881C_COMMAND_INSTR(0xC7, 0x16), //VN203  52
+	ILI9881C_COMMAND_INSTR(0xC8, 0x60), //VN175  80
+	ILI9881C_COMMAND_INSTR(0xC9, 0x1C), //VN144  111
+	ILI9881C_COMMAND_INSTR(0xCA, 0x26), //VN111  144
+	ILI9881C_COMMAND_INSTR(0xCB, 0x61), //VN80   175
+	ILI9881C_COMMAND_INSTR(0xCC, 0x28), //VN52   203
+	ILI9881C_COMMAND_INSTR(0xCD, 0x24), //VN36   219
+	ILI9881C_COMMAND_INSTR(0xCE, 0x52), //VN24   231
+	ILI9881C_COMMAND_INSTR(0xCF, 0x27), //VN16   239
+	ILI9881C_COMMAND_INSTR(0xD0, 0x2B), //VN12   243
+	ILI9881C_COMMAND_INSTR(0xD1, 0x36), //VN8    247
+	ILI9881C_COMMAND_INSTR(0xD2, 0x63), //VN4    251
+	ILI9881C_COMMAND_INSTR(0xD3, 0x39), //VN0    255
+};
+
 static inline struct ili9881c *panel_to_ili9881c(struct drm_panel *panel)
 {
 	return container_of(panel, struct ili9881c, panel);
@@ -809,6 +1018,23 @@ static const struct drm_display_mode am_8001280gtzqw_default_mode = {
 	.height_mm	= 151,
 };
 
+static const struct drm_display_mode hsd_p0711t_default_mode = {
+	.clock		= 65500,
+
+	.hdisplay	= 768,
+	.hsync_start	= 768 + 120,
+	.hsync_end	= 768 + 120 + 120,
+	.htotal		= 768 + 120 + 120 + 4,
+
+	.vdisplay	= 1024,
+	.vsync_start	= 1024 + 30,
+	.vsync_end	= 1024 + 30 + 20,
+	.vtotal		= 1024 + 30 + 20 + 4,
+
+	.width_mm	= 119,
+	.height_mm	= 159,
+};
+
 static int ili9881c_get_modes(struct drm_panel *panel,
 			      struct drm_connector *connector)
 {
@@ -930,10 +1156,18 @@ static const struct ili9881c_desc am_8001280gtzqw_desc = {
 	.mode_flags = MIPI_DSI_MODE_VIDEO_HSE | MIPI_DSI_MODE_VIDEO | MIPI_DSI_MODE_LPM | MIPI_DSI_CLOCK_NON_CONTINUOUS | MIPI_DSI_MODE_VIDEO_SYNC_PULSE,
 };
 
+static const struct ili9881c_desc hsd_p0711t_desc = {
+	.init = hsd_p0711t_init,
+	.init_length = ARRAY_SIZE(hsd_p0711t_init),
+	.mode = &hsd_p0711t_default_mode,
+	.mode_flags = MIPI_DSI_MODE_VIDEO_HSE | MIPI_DSI_MODE_VIDEO | MIPI_DSI_MODE_LPM | MIPI_DSI_CLOCK_NON_CONTINUOUS | MIPI_DSI_MODE_VIDEO_SYNC_PULSE,
+};
+
 static const struct of_device_id ili9881c_of_match[] = {
 	{ .compatible = "bananapi,lhr050h41", .data = &lhr050h41_desc },
 	{ .compatible = "feixin,k101-im2byl02", .data = &k101_im2byl02_desc },
 	{ .compatible = "ampire,am-8001280gtzqw", .data = &am_8001280gtzqw_desc },
+	{ .compatible = "hsd,p0711t", .data = &hsd_p0711t_desc },
 	{ }
 };
 MODULE_DEVICE_TABLE(of, ili9881c_of_match);
-- 
2.25.1


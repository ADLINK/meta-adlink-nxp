From ae10fc1ad59a6b5486e00516a4c74f190d720e94 Mon Sep 17 00:00:00 2001
From: Arun Kumar EV <arunkumar.ev@adlinktech.com>
Date: Wed, 19 May 2021 11:56:13 +0530
Subject: [PATCH] LEC-iMX8MP: Changes for OV13855 camera sensor.

Enable OV13855 in device tree. Add 4224x3136 resolution settings
from vendor. Few errors in previous commit with implementation
of sys debug functions corrected.

Note: Currently only 2112x1568 resolution is working in
  4 lane. With higher resolution 4224x3136, FIFO overflow
  error is observed.

Signed-off-by: Arun Kumar EV <arunkumar.ev@adlinktech.com>

diff --git a/arch/arm64/boot/dts/adlink/lec-imx8mp.dts b/arch/arm64/boot/dts/adlink/lec-imx8mp.dts
index 2ccea970c..ad7238186 100644
--- a/arch/arm64/boot/dts/adlink/lec-imx8mp.dts
+++ b/arch/arm64/boot/dts/adlink/lec-imx8mp.dts
@@ -9,7 +9,7 @@
 #include <dt-bindings/net/ti-dp83867.h>
 #include "imx8mp.dtsi"
 
-#define ENABLE_OV13850 1
+//#define ENABLE_OV13850 1
 
 / {
 	model = "ADLINK LEC-iMX8MP SOM module";
diff --git a/drivers/media/i2c/ov13850.c b/drivers/media/i2c/ov13850.c
index 954bd9710..ecdc78a2f 100644
--- a/drivers/media/i2c/ov13850.c
+++ b/drivers/media/i2c/ov13850.c
@@ -1199,7 +1199,7 @@ static ssize_t sysfs_regvalue_store(struct kobject *kobj,
 	if(countreg < MAXENTRIES) {
 		dumpvalues[countreg].addr = sysregaddr;
 		dumpvalues[countreg].val = sysregvalue;
-		counttd++;
+		countreg++;
 	}
 
 	return count;
@@ -1657,7 +1657,8 @@ static int ov13850_set_fmt(struct v4l2_subdev *sd,
 	int retval = 0, ret;
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
 	struct ov13850 *sensor = to_ov13850(client);
-	
+	int i = 0;
+
 	if(format->format.width == OV13850_RES_HIGH_WIDTH &&
 		format->format.height == OV13850_RES_HIGH_HEIGHT)
 	{
@@ -1688,7 +1689,7 @@ static int ov13850_set_fmt(struct v4l2_subdev *sd,
 	dumpvalues[countreg].val = 0;
 
 	printk(KERN_INFO "countreg size: 0x%x\n", countreg);
-	for(int i=0; dumpvalues[i].addr != REG_NULL; i++)
+	for(; dumpvalues[i].addr != REG_NULL; i++)
 	{
 		printk(KERN_INFO "addr: 0x%x, val: 0x%x\n", dumpvalues[i].addr,
 				dumpvalues[i].val);
diff --git a/drivers/media/i2c/ov13855.c b/drivers/media/i2c/ov13855.c
index de4355f18..89c2915ff 100644
--- a/drivers/media/i2c/ov13855.c
+++ b/drivers/media/i2c/ov13855.c
@@ -63,9 +63,6 @@
 #define OV13855_SENS_PAD_SOURCE	0
 #define OV13855_SENS_PADS_NUM	1
 
-//only running 8 bit settings, 10 bit need to validate
-#define OV13855_8BIT 1
-
 static const struct regval *ov13855_regs;
 
 struct regval {
@@ -107,12 +104,7 @@ struct ov13855_datafmt {
 };
 
 static const struct ov13855_datafmt ov13855_colour_fmts[] = {
-#ifdef OV13855_10BIT
-	{MEDIA_BUS_FMT_SBGGR10_1X10, V4L2_COLORSPACE_RAW},
-#endif
-#ifdef OV13855_8BIT
 	{MEDIA_BUS_FMT_SBGGR8_1X8, V4L2_COLORSPACE_RAW},
-#endif
 };
 
 
@@ -332,437 +324,220 @@ static struct regval ov13855_2112x1568[] = {
 
 /*Init settings for 13MP resolution*/
 static const struct regval ov13855_4224x3136[] = {
-#ifdef OV13855_10BIT
 	{0x0103, 0x01},
-	{0x0300, 0x00},
+	{0x0300, 0x02},
 	{0x0301, 0x00},
-	{0x0302, 0x32},
+	{0x0302, 0x5a},
 	{0x0303, 0x01},
-	{0x030a, 0x00},
-	{0x300f, 0x11},
-	{0x3010, 0x01},
-	{0x3011, 0x76},
-	{0x3012, 0x41},
-	{0x3013, 0x12},
-	{0x3014, 0x11},
-	{0x301f, 0x03},
-	{0x3106, 0x00},
-	{0x3210, 0x47},
+	{0x0303, 0x00},
+	{0x0304, 0x00},
+	{0x0305, 0x01},
+	{0x030b, 0x06},
+	{0x030c, 0x02},
+	{0x030d, 0x88},
+	{0x0312, 0x11},
+	{0x3022, 0x41},
+	{0x3012, 0x40},
+	{0x3013, 0x72},
+	{0x3016, 0x72},
+	{0x301b, 0xF0},
+	{0x301f, 0xd0},
+	{0x3106, 0x15},
+	{0x3107, 0x23},
 	{0x3500, 0x00},
-	{0x3501, 0xc0},
+	{0x3501, 0x80},
 	{0x3502, 0x00},
-	{0x3506, 0x00},
-	{0x3507, 0x02},
-	{0x3508, 0x00},
+	{0x3508, 0x02},
+	{0x3509, 0x00},
 	{0x350a, 0x00},
-	{0x350b, 0x80},
 	{0x350e, 0x00},
-	{0x350f, 0x10},
-	{0x3600, 0x40},
-	{0x3601, 0xfc},
-	{0x3602, 0x02},
-	{0x3603, 0x48},
-	{0x3604, 0xa5},
-	{0x3605, 0x9f},
-	{0x3607, 0x00},
-	{0x360a, 0x40},
-	{0x360b, 0x91},
-	{0x360c, 0x49},
-	{0x360f, 0x8a},
-	{0x3611, 0x10},
-	{0x3612, 0x27},
-	{0x3613, 0x33},
-	{0x3615, 0x08},
-	{0x3641, 0x02},
-	{0x3660, 0x82},
-	{0x3668, 0x54},
-	{0x3669, 0x00},
-	{0x3667, 0xa0},
-	{0x3702, 0x40},
-	{0x3703, 0x44},
-	{0x3704, 0x2c},
-	{0x3705, 0x24},
-	{0x3706, 0x50},
-	{0x3707, 0x44},
-	{0x3708, 0x3c},
-	{0x3709, 0x1f},
-	{0x370a, 0x24},
-	{0x370b, 0x3c},
-	{0x3720, 0x66},
-	{0x3722, 0x84},
-	{0x3728, 0x40},
-	{0x372a, 0x04},
-	{0x372e, 0x22},
-	{0x372f, 0xa0},
-	{0x3730, 0x00},
-	{0x3731, 0x00},
-	{0x3732, 0x00},
-	{0x3733, 0x00},
-	{0x3748, 0x00},
-	{0x3710, 0x28},
-	{0x3716, 0x03},
-	{0x3718, 0x10},
-	{0x3719, 0x08},
-	{0x371c, 0xfc},
-	{0x3760, 0x13},
-	{0x3761, 0x34},
-	{0x3762, 0x86},
-	{0x3763, 0x16},
-	{0x3767, 0x24},
-	{0x3768, 0x06},
-	{0x3769, 0x45},
-	{0x376c, 0x23},
-	{0x3d84, 0x00},
-	{0x3d85, 0x17},
-	{0x3d8c, 0x73},
-	{0x3d8d, 0xbf},
+	{0x3510, 0x00},
+	{0x3511, 0x02},
+	{0x3512, 0x00},
+	{0x3600, 0x2b},
+	{0x3601, 0x52},
+	{0x3602, 0x60},
+	{0x3612, 0x05},
+	{0x3613, 0xa4},
+	{0x3620, 0x80},
+	{0x3621, 0x10},
+	{0x3622, 0x30},
+	{0x3624, 0x1c},
+	{0x3640, 0x10},
+	{0x3641, 0x70},
+	{0x3660, 0x04},
+	{0x3661, 0x80},
+	{0x3662, 0x12},
+	{0x3664, 0x73},
+	{0x3665, 0xa7},
+	{0x366e, 0xff},
+	{0x366f, 0xf4},
+	{0x3674, 0x00},
+	{0x3679, 0x0c},
+	{0x367f, 0x01},
+	{0x3680, 0x0c},
+	{0x3681, 0x50},
+	{0x3682, 0x50},
+	{0x3683, 0xa9},
+	{0x3684, 0xa9},
+	{0x3706, 0x40},
+	{0x3709, 0x5f},
+	{0x3714, 0x24},
+	{0x371a, 0x3e},
+	{0x3737, 0x04},
+	{0x3738, 0xcc},
+	{0x3739, 0x12},
+	{0x373d, 0x26},
+	{0x3764, 0x20},
+	{0x3765, 0x20},
+	{0x37a1, 0x36},
+	{0x37a8, 0x3b},
+	{0x37ab, 0x31},
+	{0x37c2, 0x04},
+	{0x37c3, 0xf1},
+	{0x37c5, 0x00},
+	{0x37d8, 0x03},
+	{0x37d9, 0x0c},
+	{0x37da, 0xc2},
+	{0x37dc, 0x02},
+	{0x37e0, 0x00},
+	{0x37e1, 0x0a},
+	{0x37e2, 0x14},
+	{0x37e3, 0x04},
+	{0x37e4, 0x2A},
+	{0x37e5, 0x03},
+	{0x37e6, 0x04},
 	{0x3800, 0x00},
-	{0x3801, 0x0C},
+	{0x3801, 0x00},
 	{0x3802, 0x00},
-	{0x3803, 0x04},
+	{0x3803, 0x08},
 	{0x3804, 0x10},
-	{0x3805, 0x93},
+	{0x3805, 0x9f},
 	{0x3806, 0x0c},
-	{0x3807, 0x4B},
+	{0x3807, 0x57},
 	{0x3808, 0x10},
 	{0x3809, 0x80},
 	{0x380a, 0x0c},
 	{0x380b, 0x40},
-	{0x380c, 0x12},
-	{0x380d, 0xc0},
-	{0x380e, 0x0d},
-	{0x380f, 0x00},
-	{0x3810, 0x00},
-	{0x3811, 0x04},
-	{0x3812, 0x00},
-	{0x3813, 0x04},
-	{0x3814, 0x11},
-	{0x3815, 0x11},
-	{0x3820, 0x00},
-	{0x3821, 0x04},
-	{0x3834, 0x00},
-	{0x3835, 0x1c},
-	{0x3836, 0x04},
-	{0x3837, 0x01},
-	{0x4000, 0xf1},
-	{0x4001, 0x00},
-	{0x400b, 0x0c},
-	{0x4011, 0x00},
-	{0x401a, 0x00},
-	{0x401b, 0x00},
-	{0x401c, 0x00},
-	{0x401d, 0x00},
-	{0x4020, 0x02},
-	{0x4021, 0x4C},
-	{0x4022, 0x0E},
-	{0x4023, 0x37},
-	{0x4024, 0x0F},
-	{0x4025, 0x1C},
-	{0x4026, 0x0F},
-	{0x4027, 0x1F},
-	{0x4028, 0x00},
-	{0x4029, 0x02},
-	{0x402a, 0x04},
-	{0x402b, 0x08},
-	{0x402c, 0x02},
-	{0x402d, 0x02},
-	{0x402e, 0x0c},
-	{0x402f, 0x08},
-	{0x403d, 0x2c},
-	{0x403f, 0x7f},
-	{0x4500, 0x82},
-	{0x4501, 0x38},
-	{0x4601, 0x04},
-	{0x4602, 0x22},
-	{0x4603, 0x00},
-	{0x4837, 0x1b},
-	{0x4d00, 0x04},
-	{0x4d01, 0x42},
-	{0x4d02, 0xd1},
-	{0x4d03, 0x90},
-	{0x4d04, 0x66},
-	{0x4d05, 0x65},
-	{0x5000, 0x0e},
-	{0x5001, 0x01},
-	{0x5002, 0x07},
-	{0x5013, 0x40},
-	{0x501c, 0x00},
-	{0x501d, 0x10},
-	{0x5242, 0x00},
-	{0x5243, 0xb8},
-	{0x5244, 0x00},
-	{0x5245, 0xf9},
-	{0x5246, 0x00},
-	{0x5247, 0xf6},
-	{0x5248, 0x00},
-	{0x5249, 0xa6},
-	{0x5300, 0xfc},
-	{0x5301, 0xdf},
-	{0x5302, 0x3f},
-	{0x5303, 0x08},
-	{0x5304, 0x0c},
-	{0x5305, 0x10},
-	{0x5306, 0x20},
-	{0x5307, 0x40},
-	{0x5308, 0x08},
-	{0x5309, 0x08},
-	{0x530a, 0x02},
-	{0x530b, 0x01},
-	{0x530c, 0x01},
-	{0x530d, 0x0c},
-	{0x530e, 0x02},
-	{0x530f, 0x01},
-	{0x5310, 0x01},
-	{0x5400, 0x00},
-	{0x5401, 0x71},
-	{0x5402, 0x00},
-	{0x5403, 0x00},
-	{0x5404, 0x00},
-	{0x5405, 0x80},
-	{0x540c, 0x05},
-	{0x5b00, 0x00},
-	{0x5b01, 0x00},
-	{0x5b02, 0x01},
-	{0x5b03, 0xff},
-	{0x5b04, 0x02},
-	{0x5b05, 0x6c},
-	{0x5b09, 0x02},
-	{0x5e00, 0x00},
-	{0x5e10, 0x1c},
-#endif
-#ifdef OV13855_8BIT
-	{0x0103, 0x01},
-	{0x0300, 0x00},
-	{0x0301, 0x00},
-	{0x0302, 0x32},
-	{0x0303, 0x01},
-	{0x030a, 0x00},
-	{0x300f, 0x10},
-	{0x3010, 0x01},
-	{0x3011, 0x76},
-	{0x3012, 0x41},
-	{0x3013, 0x12},
-	{0x3014, 0x11},
-	{0x301f, 0x03},
-	{0x3106, 0x00},
-	{0x3210, 0x47},
-	{0x3500, 0x00},
-	{0x3501, 0xc0},
-	{0x3502, 0x00},
-	{0x3506, 0x00},
-	{0x3507, 0x02},
-	{0x3508, 0x00},
-	{0x350a, 0x00},
-	{0x350b, 0x80},
-	{0x350e, 0x00},
-	{0x350f, 0x10},
-	{0x351a, 0x00},
-	{0x351b, 0x10},
-	{0x351c, 0x00},
-	{0x351d, 0x20},
-	{0x351e, 0x00},
-	{0x351f, 0x40},
-	{0x3520, 0x00},
-	{0x3521, 0x80},
-	{0x3600, 0xc0},
-	{0x3601, 0xfc},
-	{0x3602, 0x02},
-	{0x3603, 0x78},
-	{0x3604, 0xb1},
-	{0x3605, 0x95},
-	{0x3606, 0x73},
-	{0x3607, 0x07},
-	{0x3609, 0x40},
-	{0x360a, 0x30},
-	{0x360b, 0x91},
-	{0x360C, 0x09},
-	{0x360f, 0x02},
-	{0x3611, 0x10},
-	{0x3612, 0x28},
-	{0x3613, 0x33},
-	{0x3614, 0x2a},
-	{0x3615, 0x0c},
-	{0x3616, 0x0e},
-	{0x3641, 0x02},
-	{0x3660, 0x82},
-	{0x3668, 0x54},
-	{0x3669, 0x00},
-	{0x366a, 0x3f},
-	{0x3667, 0xa0},
-	{0x3702, 0x40},
-	{0x3703, 0x44},
-	{0x3704, 0x2c},
-	{0x3705, 0x01},
-	{0x3706, 0x15},
-	{0x3707, 0x44},
-	{0x3708, 0x3c},
-	{0x3709, 0x1f},
-	{0x370a, 0x24},
-	{0x370b, 0x3c},
-	{0x3710, 0x28},
-	{0x3716, 0x03},
-	{0x3718, 0x10},
-	{0x3719, 0x0c},
-	{0x371a, 0x08},
-	{0x371b, 0x01},
-	{0x371c, 0xfc},
-	{0x3720, 0x55},
-	{0x3722, 0x84},
-	{0x3728, 0x40},
-	{0x372a, 0x05},
-	{0x372b, 0x02},
-	{0x372e, 0x22},
-	{0x372f, 0xa0},
-	{0x3730, 0x04},
-	{0x3731, 0xb8},
-	{0x3732, 0x04},
-	{0x3733, 0xcc},
-	{0x3738, 0x04},
-	{0x3739, 0xce},
-	{0x373a, 0x04},
-	{0x373b, 0xd0},
-	{0x3740, 0x01},
-	{0x3741, 0xd0},
-	{0x3742, 0x00},
-	{0x3743, 0x01},
-	{0x3748, 0x21},
-	{0x3749, 0x22},
-	{0x374a, 0x28},
-	{0x3760, 0x13},
-	{0x3761, 0x33},
-	{0x3762, 0x86},
-	{0x3763, 0x16},
-	{0x3767, 0x24},
-	{0x3768, 0x06},
-	{0x3769, 0x45},
-	{0x376c, 0x23},
-	{0x376f, 0x80},
-	{0x3773, 0x06},
-	{0x3780, 0x90},
-	{0x3781, 0x00},
-	{0x3782, 0x01},
-	{0x3d84, 0x00},
-	{0x3d85, 0x17},
+	{0x380c, 0x08},
+	{0x380c, 0x04},
+	{0x380d, 0xc4},
+	{0x380d, 0x62},
+	{0x380e, 0x0c},
+	{0x380f, 0x8e},
+	{0x3811, 0x10},
+	{0x3813, 0x08},
+	{0x3814, 0x01},
+	{0x3815, 0x01},
+	{0x3816, 0x01},
+	{0x3817, 0x01},
+	{0x3820, 0xa8},
+	{0x3821, 0x00},
+	{0x3822, 0xc2},
+	{0x3823, 0x18},
+	{0x3826, 0x11},
+	{0x3827, 0x1c},
+	{0x3829, 0x03},
+	{0x3832, 0x00},
+	{0x3c80, 0x00},
+	{0x3c87, 0x01},
+	{0x3c8c, 0x19},
+	{0x3c8d, 0x1c},
+	{0x3c90, 0x00},
+	{0x3c91, 0x00},
+	{0x3c92, 0x00},
+	{0x3c93, 0x00},
+	{0x3c94, 0x40},
+	{0x3c95, 0x54},
+	{0x3c96, 0x34},
+	{0x3c97, 0x04},
+	{0x3c98, 0x00},
 	{0x3d8c, 0x73},
-	{0x3d8d, 0xbf},
-	{0x3800, 0x00},
-	{0x3801, 0x0C},
-	{0x3802, 0x00},
-	{0x3803, 0x04},
-	{0x3804, 0x10},
-	{0x3805, 0x93},
-	{0x3806, 0x0c},
-	{0x3807, 0x4B},
-	{0x3808, 0x10},
-	{0x3809, 0x80},
-	{0x380a, 0x0c},
-	{0x380b, 0x40},
-	{0x380c, 0x11},
-	{0x380d, 0xa0},
-	{0x380e, 0x0d},
-	{0x380f, 0x00},
-	{0x3810, 0x00},
-	{0x3811, 0x04},
-	{0x3812, 0x00},
-	{0x3813, 0x04},
-	{0x3814, 0x11},
-	{0x3815, 0x11},
-	{0x3820, 0x00},
-	{0x3821, 0x04},
-	{0x3823, 0x00},
-	{0x3826, 0x00},
-	{0x3827, 0x02},
-	{0x3834, 0x00},
-	{0x3835, 0x1c},
-	{0x3836, 0x04},
-	{0x3837, 0x01},
-	{0x4000, 0xf1},
-	{0x4001, 0x00},
-	{0x400b, 0x0c},
-	{0x4011, 0x00},
-	{0x401a, 0x00},
-	{0x401b, 0x00},
-	{0x401c, 0x00},
-	{0x401d, 0x00},
-	{0x4020, 0x03},
-	{0x4021, 0x6C},
-	{0x4022, 0x0D},
-	{0x4023, 0x17},
-	{0x4024, 0x0D},
-	{0x4025, 0xFC},
-	{0x4026, 0x0D},
-	{0x4027, 0xFF},
-	{0x4028, 0x00},
-	{0x4029, 0x02},
-	{0x402a, 0x04},
-	{0x402b, 0x08},
-	{0x402c, 0x02},
-	{0x402d, 0x02},
-	{0x402e, 0x0c},
-	{0x402f, 0x08},
-	{0x403d, 0x2c},
-	{0x403f, 0x7F},
-	{0x4041, 0x07},
-	{0x4500, 0x82},
-	{0x4501, 0x38},
-	{0x458b, 0x00},
-	{0x459c, 0x00},
-	{0x459d, 0x00},
-	{0x459e, 0x00},
-	{0x4601, 0x04},
-	{0x4602, 0x22},
-	{0x4603, 0x00},
-	{0x4837, 0x1b},
-	{0x4d00, 0x04},
-	{0x4d01, 0x42},
-	{0x4d02, 0xd1},
-	{0x4d03, 0x90},
-	{0x4d04, 0x66},
-	{0x4d05, 0x65},
-	{0x4d0b, 0x00},
-	{0x5000, 0x0e},
-	{0x5001, 0x01},
-	{0x5002, 0x07},
-	{0x5003, 0x4f},
-	{0x5013, 0x40},
-	{0x501c, 0x00},
-	{0x501d, 0x10},
-	{0x5100, 0x30},
-	{0x5101, 0x02},
-	{0x5102, 0x01},
-	{0x5103, 0x01},
-	{0x5104, 0x02},
-	{0x5105, 0x01},
-	{0x5106, 0x01},
-	{0x5107, 0x00},
-	{0x5108, 0x00},
-	{0x5109, 0x00},
-	{0x510f, 0xfc},
-	{0x5110, 0xf0},
-	{0x5111, 0x10},
-	{0x536d, 0x02},
-	{0x536e, 0x67},
-	{0x536f, 0x01},
-	{0x5370, 0x4c},
-	{0x5400, 0x00},
-	{0x5400, 0x00},
-	{0x5401, 0x71},
-	{0x5402, 0x00},
-	{0x5403, 0x00},
-	{0x5404, 0x00},
-	{0x5405, 0x80},
-	{0x540c, 0x05},
-	{0x5501, 0x00},
-	{0x5b00, 0x00},
-	{0x5b01, 0x00},
-	{0x5b02, 0x01},
-	{0x5b03, 0xff},
-	{0x5b04, 0x02},
-	{0x5b05, 0x6c},
-	{0x5b09, 0x02},
-	{0x5e00, 0x00},
-	{0x5e10, 0x1c},
-#endif
+	{0x3d8d, 0xc0},
+	{0x3f00, 0x0b},
+	{0x3f03, 0x00},
+	{0x4001, 0xe0},
+	{0x4008, 0x00},
+	{0x4009, 0x0f},
+	{0x4011, 0xf0},
+	{0x4017, 0x08},
+	{0x4050, 0x04},
+	{0x4051, 0x0b},
+	{0x4052, 0x00},
+	{0x4053, 0x80},
+	{0x4054, 0x00},
+	{0x4055, 0x80},
+	{0x4056, 0x00},
+	{0x4057, 0x80},
+	{0x4058, 0x00},
+	{0x4059, 0x80},
+	{0x405e, 0x00},
+	{0x4500, 0x07},
+	{0x4503, 0x00},
+	{0x450a, 0x04},
+	{0x4800, 0x60},
+	{0x4809, 0x04},
+	{0x480c, 0x12},
+	{0x481f, 0x30},
+	{0x4833, 0x10},
+	{0x4837, 0x1c},
+	{0x4837, 0x0e},
+	{0x4902, 0x01},
+	{0x4d00, 0x03},
+	{0x4d01, 0xc9},
+	{0x4d02, 0xbc},
+	{0x4d03, 0xd7},
+	{0x4d04, 0xf0},
+	{0x4d05, 0xa2},
+	{0x5000, 0xff},
+	{0x5001, 0x07},
+	{0x5040, 0x39},
+	{0x5041, 0x10},
+	{0x5042, 0x10},
+	{0x5043, 0x84},
+	{0x5044, 0x62},
+	{0x5180, 0x00},
+	{0x5181, 0x10},
+	{0x5182, 0x02},
+	{0x5183, 0x0f},
+	{0x5200, 0x1b},
+	{0x520b, 0x07},
+	{0x520c, 0x0f},
+	{0x5300, 0x04},
+	{0x5301, 0x0C},
+	{0x5302, 0x0C},
+	{0x5303, 0x0f},
+	{0x5304, 0x00},
+	{0x5305, 0x70},
+	{0x5306, 0x00},
+	{0x5307, 0x80},
+	{0x5308, 0x00},
+	{0x5309, 0xa5},
+	{0x530a, 0x00},
+	{0x530b, 0xd3},
+	{0x530c, 0x00},
+	{0x530d, 0xf0},
+	{0x530e, 0x01},
+	{0x530f, 0x10},
+	{0x5310, 0x01},
+	{0x5311, 0x20},
+	{0x5312, 0x01},
+	{0x5313, 0x20},
+	{0x5314, 0x01},
+	{0x5315, 0x20},
+	{0x5316, 0x08},
+	{0x5317, 0x08},
+	{0x5318, 0x10},
+	{0x5319, 0x88},
+	{0x531a, 0x88},
+	{0x531b, 0xa9},
+	{0x531c, 0xaa},
+	{0x531d, 0x0a},
+	{0x5405, 0x02},
+	{0x5406, 0x67},
+	{0x5407, 0x01},
+	{0x5408, 0x4a},
+
 	{REG_NULL, 0x00},
 };
 
@@ -816,7 +591,7 @@ static ssize_t sysfs_regvalue_store(struct kobject *kobj,
 	if(countreg < MAXENTRIES) {
 		dumpvalues[countreg].addr = sysregaddr;
 		dumpvalues[countreg].val = sysregvalue;
-		counttd++;
+		countreg++;
 	}
 
 	return count;
@@ -954,9 +729,6 @@ static int ov13855_start_stream(struct i2c_client *client)
 		return ret;
 	}
 
-	ret = ov13855_write_array(client, reg_list);
-	if (ret)
-		return ret;
 	ret = ov13855_write_reg(client,
 				 OV13855_REG_CTRL_MODE,
 				 OV13855_REG_VALUE_08BIT,
@@ -1240,11 +1012,12 @@ static int ov13855_s_stream(struct v4l2_subdev *sd, int enable)
 		}
 
 		retval = ov13855_write_reg(client, OV13855_VCHANNEL,
-					OV13855_REG_VALUE_08BIT, 0x2/*sensor->csi_vc*/);
+					OV13855_REG_VALUE_08BIT, sensor->csi_vc);
 		if(retval) {
 			pr_err("%s: set virtual channel failed\n", __func__);
 			return retval;
 		}
+
 	}
 	else {
 		retval = ov13855_stop_stream(client);
@@ -1264,6 +1037,7 @@ static int ov13855_set_fmt(struct v4l2_subdev *sd,
 	int retval = 0, ret;
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
 	struct ov13855 *sensor = to_ov13855(client);
+	int i = 0;
 
 	if(format->format.width == OV13855_RES_HIGH_WIDTH &&
 		format->format.height == OV13855_RES_HIGH_HEIGHT)
@@ -1295,7 +1069,7 @@ static int ov13855_set_fmt(struct v4l2_subdev *sd,
 	dumpvalues[countreg].val = 0;
 
 	printk(KERN_INFO "countreg size: 0x%x\n", countreg);
-	for(int i=0; dumpvalues[i].addr != REG_NULL; i++)
+	for(; dumpvalues[i].addr != REG_NULL; i++)
 	{
 		printk(KERN_INFO "addr: 0x%x, val: 0x%x\n", dumpvalues[i].addr,
 				dumpvalues[i].val);
@@ -1430,13 +1204,9 @@ static int ov13855_probe(struct i2c_client *client,
 	}
 
 	sensor->i2c_client = client;
+
 	/*Only can handle 8bit mode for now*/
-#ifdef OV13855_8BIT
 	sensor->pix.pixelformat = V4L2_PIX_FMT_SBGGR8;
-#endif
-#ifdef OV13855_10BIT
-	sensor->pix.pixelformat = V4L2_PIX_FMT_SBGGR10;
-#endif
 	sensor->pix.width = OV13855_RES_LOW_WIDTH;
         sensor->pix.height = OV13855_RES_LOW_HEIGHT;
 	sensor->streamcap.capability = V4L2_MODE_HIGHQUALITY |
-- 
2.17.1


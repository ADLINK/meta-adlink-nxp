From 83bf26d72b99f782b4e4f8fdf34209b59c5d1d71 Mon Sep 17 00:00:00 2001
From: Santhana Kumar <santhanakumar.a@ltts.com>
Date: Thu, 4 Apr 2019 16:46:58 +0530
Subject: [PATCH 16/47] optimize compile when 6Q/SL/SX/UL/7D support is
 disabled

When e.g. CONFIG_SOC_IMX6SL=n make cpu_is_imx6sl() return constant false instead
of checking CPU registers. Same for other i.MX models, allowing the compiler to drop dead code.

Old 3.10.x kernels even produced a few link errors e.g. in imx6q_pm_enter()
when CONFIG_SOC_IMX6Q=y but SOC_IMX6SL or SOC_IMX6SX=n; these
have been '#ifdef'ed in 4.1, however handling this in cpu_is_*() in the header
looks cleaner and allows more optimizations.

imx_src_is_m4_enabled() might have been turned constant, too (!SX && !7D AFAICT), but
this didn't seem worth it.

Also fixes an annoying warning about imx_gpcv2_add_m4_wake_up_irq() being
unused.

Signed-off-by: Santhana Kumar <santhanakumar.a@ltts.com>
---
 arch/arm/mach-imx/mxc.h     | 31 ++++++++++++++++++++++++++-----
 arch/arm/mach-imx/pm-imx6.c |  4 ----
 2 files changed, 26 insertions(+), 9 deletions(-)

diff --git a/arch/arm/mach-imx/mxc.h b/arch/arm/mach-imx/mxc.h
index 95e7c3e6..e70d42f 100644
--- a/arch/arm/mach-imx/mxc.h
+++ b/arch/arm/mach-imx/mxc.h
@@ -56,31 +56,40 @@
 #ifndef __ASSEMBLY__
 extern unsigned int __mxc_cpu_type;
 
-#ifdef CONFIG_SOC_IMX6SL
 static inline bool cpu_is_imx6sl(void)
 {
+#ifdef CONFIG_SOC_IMX6SL
 	return __mxc_cpu_type == MXC_CPU_IMX6SL;
-}
 #else
-static inline bool cpu_is_imx6sl(void)
-{
 	return false;
-}
 #endif
+}
 
 static inline bool cpu_is_imx6dl(void)
 {
+#ifdef CONFIG_SOC_IMX6Q /* Q means Q/DL in this case */
 	return __mxc_cpu_type == MXC_CPU_IMX6DL;
+#else
+	return false;
+#endif
 }
 
 static inline bool cpu_is_imx6sx(void)
 {
+#ifdef CONFIG_SOC_IMX6SX
 	return __mxc_cpu_type == MXC_CPU_IMX6SX;
+#else
+	return false;
+#endif
 }
 
 static inline bool cpu_is_imx6ul(void)
 {
+#ifdef CONFIG_SOC_IMX6UL
 	return __mxc_cpu_type == MXC_CPU_IMX6UL;
+#else
+	return false;
+#endif
 }
 
 static inline bool cpu_is_imx6ull(void)
@@ -96,11 +105,16 @@ static inline bool cpu_is_imx6sll(void)
 
 static inline bool cpu_is_imx6q(void)
 {
+#ifdef CONFIG_SOC_IMX6Q
 	return __mxc_cpu_type == MXC_CPU_IMX6Q;
+#else
+	return false;
+#endif
 }
 
 static inline bool cpu_is_imx6(void)
 {
+#ifdef CONFIG_SOC_IMX6
 	return __mxc_cpu_type == MXC_CPU_IMX6Q ||
 		__mxc_cpu_type == MXC_CPU_IMX6DL ||
 		__mxc_cpu_type == MXC_CPU_IMX6SL ||
@@ -109,11 +123,18 @@ static inline bool cpu_is_imx6(void)
 		__mxc_cpu_type == MXC_CPU_IMX6ULL ||
 		__mxc_cpu_type == MXC_CPU_IMX6SLL ||
 		__mxc_cpu_type == MXC_CPU_IMX6ULZ;
+#else
+	return false;
+#endif
 }
 
 static inline bool cpu_is_imx7d(void)
 {
+#ifdef CONFIG_SOC_IMX7D
 	return __mxc_cpu_type == MXC_CPU_IMX7D;
+#else
+	return false;
+#endif
 }
 
 static inline bool cpu_is_imx7ulp(void)
diff --git a/arch/arm/mach-imx/pm-imx6.c b/arch/arm/mach-imx/pm-imx6.c
index 5d0a7c3..703b00d 100644
--- a/arch/arm/mach-imx/pm-imx6.c
+++ b/arch/arm/mach-imx/pm-imx6.c
@@ -868,16 +868,12 @@ static int imx6q_pm_enter(suspend_state_t state)
 		imx6_set_lpm(STOP_POWER_ON);
 		imx6_set_int_mem_clk_lpm(true);
 		imx_gpc_pre_suspend(false);
-#ifdef CONFIG_SOC_IMX6SL
 		if (cpu_is_imx6sl())
 			imx6sl_set_wait_clk(true);
-#endif
 		/* Zzz ... */
 		cpu_do_idle();
-#ifdef CONFIG_SOC_IMX6SL
 		if (cpu_is_imx6sl())
 			imx6sl_set_wait_clk(false);
-#endif
 		imx_gpc_post_resume();
 		imx6_set_lpm(WAIT_CLOCKED);
 		break;
-- 
2.7.4


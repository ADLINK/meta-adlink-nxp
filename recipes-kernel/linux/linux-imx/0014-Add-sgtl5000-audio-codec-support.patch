From 9c63835270288a90f022e280d7425da5d34cc486 Mon Sep 17 00:00:00 2001
From: Antony Abee Prakash XV <antonyabee.prakashxv@adlinktech.com>
Date: Thu, 2 Jul 2020 19:28:17 +0530
Subject: [PATCH 14/14] Add-sgtl5000-audio-codec-support

This patch adds devicetree entries and driver support for sgtl5000 audio codec

Signed-off-by: Antony Abee Prakash XV <antonyabee.prakashxv@adlinktech.com>
---
 .../boot/dts/adlink/adlink-lec-imx8m.dts      | 151 ++++--------
 arch/arm64/configs/lec_imx8m_defconfig        |   1 +
 include/linux/err.h                           |  15 ++
 sound/soc/codecs/sgtl5000.c                   |  84 +++++--
 sound/soc/codecs/sgtl5000.h                   |   3 +
 sound/soc/fsl/Kconfig                         |   8 +
 sound/soc/fsl/Makefile                        |   2 +
 sound/soc/fsl/imx8-sgtl5000.c                 | 231 ++++++++++++++++++
 8 files changed, 368 insertions(+), 127 deletions(-)
 create mode 100644 sound/soc/fsl/imx8-sgtl5000.c

diff --git a/arch/arm64/boot/dts/adlink/adlink-lec-imx8m.dts b/arch/arm64/boot/dts/adlink/adlink-lec-imx8m.dts
index 69613a622610..a2b1192db927 100755
--- a/arch/arm64/boot/dts/adlink/adlink-lec-imx8m.dts
+++ b/arch/arm64/boot/dts/adlink/adlink-lec-imx8m.dts
@@ -88,36 +88,16 @@
 			  900000 0x1>;
 	};
 
-	wm8524: audio-codec {
-		#sound-dai-cells = <0>;
-		compatible = "wlf,wm8524";
-		wlf,mute-gpios = <&gpio1 8 GPIO_ACTIVE_LOW>;
-	};
-
-	sound-wm8524 {
-		compatible = "simple-audio-card";
-		simple-audio-card,name = "wm8524-audio";
-		simple-audio-card,format = "i2s";
-		simple-audio-card,frame-master = <&cpudai>;
-		simple-audio-card,bitclock-master = <&cpudai>;
-		simple-audio-card,widgets =
-			"Line", "Left Line Out Jack",
-			"Line", "Right Line Out Jack";
-		simple-audio-card,routing =
-			"Left Line Out Jack", "LINEVOUTL",
-			"Right Line Out Jack", "LINEVOUTR";
-
-		cpudai: simple-audio-card,cpu {
-			sound-dai = <&sai2>;
-			dai-tdm-slot-num = <2>;
-			dai-tdm-slot-width = <32>;
-		};
-
-		link_codec: simple-audio-card,codec {
-			sound-dai = <&wm8524>;
-			clocks = <&clk IMX8MQ_CLK_SAI2_ROOT>;
-		};
-	};
+        sound-sgtl5000 {
+                compatible = "fsl,imx8-audio-sgtl5000";
+                model = "imx8-audio-sgtl5000";
+                audio-cpu = <&sai2>;
+                audio-codec = <&sgtl5000>;
+                audio-routing =
+                        "MIC_IN",                       "JACK_MIC_IN",
+                        "LINE_IN",                      "JACK_LINE_IN",
+                        "JACK_LINE_OUT",        "LINE_OUT";
+        };
 
 	sound-hdmi {
 		compatible = "fsl,imx8mq-evk-cdnhdmi",
@@ -134,13 +114,6 @@
 				<96000>,
 				<192000>;
 	};
-
-	sound-ak5558 {
-		compatible = "fsl,imx-audio-ak5558-mq";
-		model = "ak5558-audio";
-		audio-cpu = <&sai5>;
-		audio-codec = <&ak5558>;
-	};
 };
 
 &CPU_SLEEP {
@@ -307,21 +280,6 @@
 	status = "okay";
 };
 
-&sai5 {
-	pinctrl-names = "default";
-	pinctrl-0 = <&pinctrl_sai5>;
-	assigned-clocks = <&clk IMX8MQ_CLK_SAI5>;
-	assigned-clock-parents = <&clk IMX8MQ_AUDIO_PLL1_OUT>;
-	assigned-clock-rates = <49152000>;
-	clocks = <&clk IMX8MQ_CLK_SAI5_IPG>, <&clk IMX8MQ_CLK_DUMMY>,
-		<&clk IMX8MQ_CLK_SAI5_ROOT>, <&clk IMX8MQ_CLK_DUMMY>,
-		<&clk IMX8MQ_CLK_DUMMY>, <&clk IMX8MQ_AUDIO_PLL1_OUT>,
-		<&clk IMX8MQ_AUDIO_PLL2_OUT>;
-	clock-names = "bus", "mclk0", "mclk1", "mclk2", "mclk3", "pll8k", "pll11k";
-	fsl,sai-asynchronous;
-	status = "okay";
-};
-
 &i2c1 {
 	clock-frequency = <100000>;
 	pinctrl-names = "default";
@@ -443,28 +401,6 @@
 	pinctrl-0 = <&pinctrl_i2c3>;
 	status = "okay";
 
-	ak4458_1: ak4458@10 {
-		compatible = "asahi-kasei,ak4458";
-		reg = <0x10>;
-	};
-
-	ak4458_2: ak4458@12 {
-		compatible = "asahi-kasei,ak4458";
-		reg = <0x12>;
-	};
-
-	ak5558: ak5558@13 {
-		compatible = "asahi-kasei,ak5558";
-		reg = <0x13>;
-		ak5558,pdn-gpio = <&gpio3 17 GPIO_ACTIVE_HIGH>;
-	};
-
-	ak4497: ak4497@11 {
-		compatible = "asahi-kasei,ak4497";
-		reg = <0x11>;
-		ak4497,pdn-gpio = <&gpio3 16 GPIO_ACTIVE_HIGH>;
-	};
-
         pcal6416a: pcal6416a@20 {
                 compatible = "nxp,pca9535";
                 reg = <0x20>;
@@ -487,27 +423,39 @@
 	pinctrl-0 = <&pinctrl_i2c2>;
 	status = "okay";
 
-	ov5640_mipi: ov5640_mipi@3c {
-		compatible = "ovti,ov5640_mipi";
-		reg = <0x3c>;
-		status = "okay";
-		pinctrl-names = "default";
-		pinctrl-0 = <&pinctrl_csi1_pwn>;
-		clocks = <&clk IMX8MQ_CLK_CLKO2>;
-		clock-names = "csi_mclk";
-		assigned-clocks = <&clk IMX8MQ_CLK_CLKO2>;
-		assigned-clock-parents = <&clk IMX8MQ_SYS2_PLL_200M>;
-		assigned-clock-rates = <20000000>;
-		csi_id = <0>;
-		pwn-gpios = <&gpio1 3 GPIO_ACTIVE_HIGH>;
-		mclk = <20000000>;
-		mclk_source = <0>;
-		port {
-			ov5640_mipi1_ep: endpoint {
-				remote-endpoint = <&mipi1_sensor_ep>;
-			};
-		};
-	};
+        ov5640_mipi: ov5640_mipi@3c {
+                compatible = "ovti,ov5640_mipi";
+                reg = <0x3c>;
+                status = "okay";
+                pinctrl-names = "default";
+                pinctrl-0 = <&pinctrl_csi1_pwn>;
+                clocks = <&clk IMX8MQ_CLK_CLKO2>;
+                clock-names = "csi_mclk";
+                assigned-clocks = <&clk IMX8MQ_CLK_CLKO2>;
+                assigned-clock-parents = <&clk IMX8MQ_SYS2_PLL_200M>;
+                assigned-clock-rates = <20000000>;
+                csi_id = <0>;
+                pwn-gpios = <&gpio1 3 GPIO_ACTIVE_HIGH>;
+                mclk = <20000000>;
+                mclk_source = <0>;
+                port {
+                        ov5640_mipi1_ep: endpoint {
+                                remote-endpoint = <&mipi1_sensor_ep>;
+                        };
+                };
+        };
+
+        sgtl5000: codec@2a {
+                compatible = "fsl,sgtl5000";
+                reg = <0x2a>;
+                clocks = <&clk IMX8MQ_CLK_SAI2_ROOT>;
+                clock-names = "mclk";
+                //micbias-resistor-k-ohms       = <2>;
+                //micbias-voltage-m-volts       = <2250>;
+                //VDDA-supply                           = <&reg_XXX>;
+                //VDDIO-supply                          = <&reg_XXX>;
+                //VDDD-supply                           = <&reg_XXX>;
+        };
 };
 
 &i2c4 {
@@ -748,18 +696,7 @@
 			MX8MQ_IOMUXC_SAI2_TXC_SAI2_TX_BCLK      0xd6
 			MX8MQ_IOMUXC_SAI2_MCLK_SAI2_MCLK        0xd6
 			MX8MQ_IOMUXC_SAI2_TXD0_SAI2_TX_DATA0    0xd6
-		>;
-	};
-
-	pinctrl_sai5: sai5grp {
-		fsl,pins = <
-			MX8MQ_IOMUXC_SAI5_MCLK_SAI5_MCLK	0xd6
-			MX8MQ_IOMUXC_SAI5_RXC_SAI5_RX_BCLK	0xd6
-			MX8MQ_IOMUXC_SAI5_RXFS_SAI5_RX_SYNC	0xd6
-			MX8MQ_IOMUXC_SAI5_RXD0_SAI5_RX_DATA0	0xd6
-			MX8MQ_IOMUXC_SAI5_RXD1_SAI5_RX_DATA1    0xd6
-			MX8MQ_IOMUXC_SAI5_RXD2_SAI5_RX_DATA2    0xd6
-			MX8MQ_IOMUXC_SAI5_RXD3_SAI5_RX_DATA3    0xd6
+			MX8MQ_IOMUXC_SAI2_RXD0_SAI2_RX_DATA0    0xd6
 		>;
 	};
 
diff --git a/arch/arm64/configs/lec_imx8m_defconfig b/arch/arm64/configs/lec_imx8m_defconfig
index 32536a47bc9a..360738758993 100644
--- a/arch/arm64/configs/lec_imx8m_defconfig
+++ b/arch/arm64/configs/lec_imx8m_defconfig
@@ -508,6 +508,7 @@ CONFIG_SND_IMX_SOC=y
 CONFIG_SND_SOC_IMX_AK5558=y
 CONFIG_SND_SOC_IMX_WM8960=y
 CONFIG_SND_SOC_IMX_WM8524=y
+CONFIG_SND_SOC_IMX8_SGTL5000=m
 CONFIG_SND_SOC_IMX_CS42888=y
 CONFIG_SND_SOC_IMX_MICFIL=y
 CONFIG_SND_SOC_IMX_RPMSG=y
diff --git a/include/linux/err.h b/include/linux/err.h
index 87be24350e91..91fe761711c1 100644
--- a/include/linux/err.h
+++ b/include/linux/err.h
@@ -67,4 +67,19 @@ static inline int __must_check PTR_ERR_OR_ZERO(__force const void *ptr)
 
 #endif
 
+#ifdef ADLINK_DEBUG //printk(KERN_EMERG PREFIX_DD )
+#define PDD     " @@ "
+#define Fl_             printk(PDD "%s(%d)\n",__FILE__,__LINE__);
+#define fl_             printk(PDD "%s(%d)\n",__func__,__LINE__);
+#define efl_    printk(PDD "Error! %s(%d)\n",__func__,__LINE__);
+#define am_(x)  printk x
+#else
+#define PDD ""
+#define Fl_
+#define fl_
+#define efl_
+#define am_(x)
+#endif
+#define Link2(x)
+
 #endif /* _LINUX_ERR_H */
diff --git a/sound/soc/codecs/sgtl5000.c b/sound/soc/codecs/sgtl5000.c
index aa1f9637d895..2d0824118607 100644
--- a/sound/soc/codecs/sgtl5000.c
+++ b/sound/soc/codecs/sgtl5000.c
@@ -28,6 +28,10 @@
 
 #include "sgtl5000.h"
 
+#include <linux/err.h>
+#define ADLINK_NO_DTS_REGULATOR//Did not use regulator defined on dts;
+#define ADLINK_DEBUG//ky_add;
+
 #define SGTL5000_DAP_REG_OFFSET	0x0100
 #define SGTL5000_MAX_REG_OFFSET	0x013A
 
@@ -99,12 +103,14 @@ enum sgtl5000_regulator_supplies {
 	SGTL5000_SUPPLY_NUM
 };
 
+#ifndef ADLINK_NO_DTS_REGULATOR
 /* vddd is optional supply */
 static const char *supply_names[SGTL5000_SUPPLY_NUM] = {
 	"VDDA",
 	"VDDIO",
 	"VDDD"
 };
+#endif
 
 #define LDO_VOLTAGE		1200000
 #define LINREG_VDDD	((1600 - LDO_VOLTAGE / 1000) / 50)
@@ -1299,11 +1305,18 @@ static int sgtl5000_set_power_regs(struct snd_soc_component *component)
 	size_t i;
 	struct sgtl5000_priv *sgtl5000 = snd_soc_component_get_drvdata(component);
 
-	vdda  = regulator_get_voltage(sgtl5000->supplies[VDDA].consumer);
-	vddio = regulator_get_voltage(sgtl5000->supplies[VDDIO].consumer);
-	vddd  = (sgtl5000->num_supplies > VDDD)
-		? regulator_get_voltage(sgtl5000->supplies[VDDD].consumer)
-		: LDO_VOLTAGE;
+	//ky_wait: Should pass from DTS
+	if(0==sgtl5000->num_supplies) {
+		vdda=33000;
+		vddio=vddd=18000;
+	}
+	else {
+		vdda  = regulator_get_voltage(sgtl5000->supplies[VDDA].consumer);
+		vddio = regulator_get_voltage(sgtl5000->supplies[VDDIO].consumer);
+		vddd  = (sgtl5000->num_supplies > VDDD)
+			? regulator_get_voltage(sgtl5000->supplies[VDDD].consumer)
+			: LDO_VOLTAGE;
+	}
 
 	vdda  = vdda / 1000;
 	vddio = vddio / 1000;
@@ -1416,6 +1429,11 @@ static int sgtl5000_set_power_regs(struct snd_soc_component *component)
 
 static int sgtl5000_enable_regulators(struct i2c_client *client)
 {
+#ifdef ADLINK_NO_DTS_REGULATOR
+        struct sgtl5000_priv *priv=i2c_get_clientdata(client);
+        priv->num_supplies=0;
+        return 0;
+#else  
 	int ret;
 	int i;
 	int external_vddd = 0;
@@ -1426,7 +1444,7 @@ static int sgtl5000_enable_regulators(struct i2c_client *client)
 		sgtl5000->supplies[i].supply = supply_names[i];
 
 	vddd = regulator_get_optional(&client->dev, "VDDD");
-	if (IS_ERR(vddd)) {
+	if (IS_ERR(vddd)) {//YES, Error = -ENODEV;
 		/* See if it's just not registered yet */
 		if (PTR_ERR(vddd) == -EPROBE_DEFER)
 			return -EPROBE_DEFER;
@@ -1435,22 +1453,24 @@ static int sgtl5000_enable_regulators(struct i2c_client *client)
 		regulator_put(vddd);
 	}
 
-	sgtl5000->num_supplies = ARRAY_SIZE(sgtl5000->supplies)
-				 - 1 + external_vddd;
-	ret = regulator_bulk_get(&client->dev, sgtl5000->num_supplies,
-				 sgtl5000->supplies);
-	if (ret)
-		return ret;
+        sgtl5000->num_supplies = ARRAY_SIZE(sgtl5000->supplies) - 1 + external_vddd;
+        ret = regulator_bulk_get(&client->dev, sgtl5000->num_supplies, sgtl5000->supplies);
+//[ 8444.158550] 1-002a supply VDDA not found, using dummy regulator
+//[ 8444.164733] 1-002a supply VDDIO not found, using dummy regulator
+
+        if (ret) {
+efl_    return ret; }
 
 	ret = regulator_bulk_enable(sgtl5000->num_supplies,
 				    sgtl5000->supplies);
-	if (!ret)
+	if (!ret)//YES;
 		usleep_range(10, 20);
 	else
 		regulator_bulk_free(sgtl5000->num_supplies,
 				    sgtl5000->supplies);
 
 	return ret;
+#endif
 }
 
 static int sgtl5000_probe(struct snd_soc_component *component)
@@ -1578,15 +1598,22 @@ static int sgtl5000_i2c_probe(struct i2c_client *client,
 	u32 value;
 	u16 ana_pwr;
 
+efl_
 	sgtl5000 = devm_kzalloc(&client->dev, sizeof(*sgtl5000), GFP_KERNEL);
 	if (!sgtl5000)
 		return -ENOMEM;
 
 	i2c_set_clientdata(client, sgtl5000);
+//am_((PDD "i2c_client: name=%s, addr=0x%02X, dev_name=%s, adapter=%s, adapter_dev_name=%s\n",
+//      client->name,client->addr,dev_name(&client->dev),client->adapter->name,dev_name(&client->adapter->dev)));
+//@@ i2c_client: name=sgtl5000, addr=0x2A, dev_name=1-002a, adapter=30a30000.i2c, adapter_dev_name=i2c-1
 
 	ret = sgtl5000_enable_regulators(client);
-	if (ret)
-		return ret;
+//[ 8444.158550] 1-002a supply VDDA not found, using dummy regulator
+//[ 8444.164733] 1-002a supply VDDIO not found, using dummy regulator
+       
+        if (ret) {//NO;
+efl_    return ret; }
 
 	sgtl5000->regmap = devm_regmap_init_i2c(client, &sgtl5000_regmap);
 	if (IS_ERR(sgtl5000->regmap)) {
@@ -1595,9 +1622,12 @@ static int sgtl5000_i2c_probe(struct i2c_client *client,
 		goto disable_regs;
 	}
 
+//clocks               = <&clk IMX8MQ_CLK_SAI2_ROOT>;
+//clock-names  = "mclk";
+
 	sgtl5000->mclk = devm_clk_get(&client->dev, NULL);
-	if (IS_ERR(sgtl5000->mclk)) {
-		ret = PTR_ERR(sgtl5000->mclk);
+	if (IS_ERR(sgtl5000->mclk)) {//NO;
+efl_		ret = PTR_ERR(sgtl5000->mclk);
 		/* Defer the probe to see if the clk will be provided later */
 		if (ret == -ENOENT)
 			ret = -EPROBE_DEFER;
@@ -1608,9 +1638,13 @@ static int sgtl5000_i2c_probe(struct i2c_client *client,
 		goto disable_regs;
 	}
 
+//am_((PDD "mclk: dev_id=%s, con_id=%s, min=%lu, max=%lu\n",(char *)((long *)sgtl5000->mclk)[1],
+//     (char *)((long *)sgtl5000->mclk)[2],((long *)sgtl5000->mclk)[3],((long *)sgtl5000->mclk)[4]));
+//@@ mclk: dev_id=1-002a, con_id=(null), min=0, max=18446744073709551615
+       
 	ret = clk_prepare_enable(sgtl5000->mclk);
-	if (ret) {
-		dev_err(&client->dev, "Error enabling clock %d\n", ret);
+	if (ret) {//NO;
+efl_		dev_err(&client->dev, "Error enabling clock %d\n", ret);
 		goto disable_regs;
 	}
 
@@ -1634,6 +1668,7 @@ static int sgtl5000_i2c_probe(struct i2c_client *client,
 
 	rev = (reg & SGTL5000_REVID_MASK) >> SGTL5000_REVID_SHIFT;
 	dev_info(&client->dev, "sgtl5000 revision 0x%x\n", rev);
+	//sgtl5000 1-002a: sgtl5000 revision 0x11
 	sgtl5000->revision = rev;
 
 	/* reconfigure the clocks in case we're using the PLL */
@@ -1646,7 +1681,7 @@ static int sgtl5000_i2c_probe(struct i2c_client *client,
 
 	/* Follow section 2.2.1.1 of AN3663 */
 	ana_pwr = SGTL5000_ANA_POWER_DEFAULT;
-	if (sgtl5000->num_supplies <= VDDD) {
+	if (sgtl5000->num_supplies <= VDDD) {//YES;
 		/* internal VDDD at 1.2V */
 		ret = regmap_update_bits(sgtl5000->regmap,
 					 SGTL5000_CHIP_LINREG_CTRL,
@@ -1659,6 +1694,7 @@ static int sgtl5000_i2c_probe(struct i2c_client *client,
 		ana_pwr |= SGTL5000_LINEREG_D_POWERUP;
 		dev_info(&client->dev,
 			 "Using internal LDO instead of VDDD: check ER1 erratum\n");
+		//sgtl5000 1-002a: Using internal LDO instead of VDDD: check ER1
 	} else {
 		/* using external LDO for VDDD
 		 * Clear startup powerup and simple powerup
@@ -1737,6 +1773,8 @@ static int sgtl5000_i2c_probe(struct i2c_client *client,
 	if (ret)
 		goto disable_clk;
 
+        dev_info(&client->dev,"%s(0x%02X) done!\n",__func__,client->addr);
+
 	return 0;
 
 disable_clk:
@@ -1760,6 +1798,12 @@ static int sgtl5000_i2c_remove(struct i2c_client *client)
 	return 0;
 }
 
+/* For module dependency with SGTL5000 Card driver */
+void sgtl5000_sync(void)
+{
+}
+EXPORT_SYMBOL_GPL(sgtl5000_sync);
+
 static const struct i2c_device_id sgtl5000_id[] = {
 	{"sgtl5000", 0},
 	{},
diff --git a/sound/soc/codecs/sgtl5000.h b/sound/soc/codecs/sgtl5000.h
index a4bf4bca95bf..0ecf83657545 100644
--- a/sound/soc/codecs/sgtl5000.h
+++ b/sound/soc/codecs/sgtl5000.h
@@ -403,4 +403,7 @@
 #define SGTL5000_DAP_SEL_TONE_CTRL		2
 #define SGTL5000_DAP_SEL_GEQ			3
 
+/* For module dependency with SGTL5000 Card driver */
+extern void sgtl5000_sync(void);
+
 #endif
diff --git a/sound/soc/fsl/Kconfig b/sound/soc/fsl/Kconfig
index e3f94e95e746..1bbefd7f3662 100644
--- a/sound/soc/fsl/Kconfig
+++ b/sound/soc/fsl/Kconfig
@@ -462,6 +462,14 @@ config SND_SOC_IMX_SGTL5000
 	  Say Y if you want to add support for SoC audio on an i.MX board with
 	  a sgtl5000 codec.
 
+config SND_SOC_IMX8_SGTL5000
+	tristate "SoC Audio support for i.MX8 boards with sgtl5000"
+	depends on OF && I2C
+	select SND_SOC_FSL_SAI
+	select SND_SOC_SGTL5000
+	help
+	  Say Y if you want to add support for ASOC on iMX8+SGTL5000.
+
 config SND_SOC_IMX_MQS
 	tristate "SoC Audio support for i.MX boards with MQS"
 	depends on OF
diff --git a/sound/soc/fsl/Makefile b/sound/soc/fsl/Makefile
index 630a39ae8eb0..dfa77b550f55 100644
--- a/sound/soc/fsl/Makefile
+++ b/sound/soc/fsl/Makefile
@@ -77,6 +77,7 @@ snd-soc-wm1133-ev1-objs := wm1133-ev1.o
 snd-soc-imx-es8328-objs := imx-es8328.o
 snd-soc-imx-cs42888-objs := imx-cs42888.o
 snd-soc-imx-sgtl5000-objs := imx-sgtl5000.o
+snd-soc-imx8-sgtl5000-objs := imx8-sgtl5000.o
 snd-soc-imx-wm8958-objs := imx-wm8958.o
 snd-soc-imx-wm8960-objs := imx-wm8960.o
 snd-soc-imx-wm8524-objs := imx-wm8524.o
@@ -104,6 +105,7 @@ obj-$(CONFIG_SND_MXC_SOC_WM1133_EV1) += snd-soc-wm1133-ev1.o
 obj-$(CONFIG_SND_SOC_IMX_ES8328) += snd-soc-imx-es8328.o
 obj-$(CONFIG_SND_SOC_IMX_CS42888) += snd-soc-imx-cs42888.o
 obj-$(CONFIG_SND_SOC_IMX_SGTL5000) += snd-soc-imx-sgtl5000.o
+obj-$(CONFIG_SND_SOC_IMX8_SGTL5000) += snd-soc-imx8-sgtl5000.o
 obj-${CONFIG_SND_SOC_IMX_WM8958} += snd-soc-imx-wm8958.o
 obj-$(CONFIG_SND_SOC_IMX_WM8960) += snd-soc-imx-wm8960.o
 obj-$(CONFIG_SND_SOC_IMX_WM8524) += snd-soc-imx-wm8524.o
diff --git a/sound/soc/fsl/imx8-sgtl5000.c b/sound/soc/fsl/imx8-sgtl5000.c
new file mode 100644
index 000000000000..7af3809dba97
--- /dev/null
+++ b/sound/soc/fsl/imx8-sgtl5000.c
@@ -0,0 +1,231 @@
+/*
+ * Copyright 2012 Freescale Semiconductor, Inc.
+ * Copyright 2012 Linaro Ltd.
+ *
+ * The code contained herein is licensed under the GNU General Public
+ * License. You may obtain a copy of the GNU General Public License
+ * Version 2 or later at the following locations:
+ *
+ * http://www.opensource.org/licenses/gpl-license.html
+ * http://www.gnu.org/copyleft/gpl.html
+ */
+
+#define ADLINK_DEBUG//ky_add;
+#include <linux/err.h>
+
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_platform.h>
+#include <linux/i2c.h>
+#include <linux/clk.h>
+#include <sound/soc.h>
+
+#include "../codecs/sgtl5000.h"
+
+
+struct imx_sgtl5000_data {
+	struct platform_device *pdev;
+	struct snd_soc_dai_link dai;
+	struct snd_soc_card card;
+	struct clk *codec_mclk;
+	unsigned long mclk_frequency;
+};
+
+static int imx_sgtl5000_dai_init (struct snd_soc_pcm_runtime *rtd)
+{
+	struct imx_sgtl5000_data *data = snd_soc_card_get_drvdata(rtd->card);
+	struct device *dev = rtd->card->dev;
+	int ret;
+fl_
+	ret = snd_soc_dai_set_sysclk(rtd->codec_dai, SGTL5000_SYSCLK,data->mclk_frequency, SND_SOC_CLOCK_IN);
+	if (ret) {
+		dev_err(dev, "could not set codec driver clock params\n");
+		return ret;
+	}
+
+	return 0;
+}
+
+static const struct snd_soc_dapm_widget imx_sgtl5000_dapm_widgets[] = {
+	SND_SOC_DAPM_MIC ("JACK_MIC_IN",  NULL),
+	SND_SOC_DAPM_LINE("JACK_LINE_IN", NULL),
+	SND_SOC_DAPM_SPK ("JACK_LINE_OUT",NULL),
+};
+
+void imx8_sgtl5000_module_depend_used (void)
+{
+	/* Call sgtl5000_sync() to depend on SGTL5000 Codec driver */
+	sgtl5000_sync();
+}
+
+static int imx8_sgtl5000_probe (struct platform_device *pdev)
+{
+	struct device_node *np_pdev = pdev->dev.of_node;
+	struct device_node *np_AudioCpu, *np_AudioCodec;
+	struct platform_device *pdev_cpu;
+	struct i2c_client *i2client_codec;
+	struct imx_sgtl5000_data *data = NULL;
+	struct snd_soc_dai_link_component *comp;
+	int ret;
+
+	np_AudioCpu = of_parse_phandle(np_pdev, "audio-cpu", 0);
+	np_AudioCodec = of_parse_phandle(np_pdev, "audio-codec", 0);
+	if (!np_AudioCpu || !np_AudioCodec) {
+		dev_err(&pdev->dev, "phandle missing or invalid\n");
+		ret = -EINVAL;
+		goto fail;
+	}
+
+	pdev_cpu = of_find_device_by_node(np_AudioCpu);
+	if (!pdev_cpu) {
+		dev_err(&pdev->dev, "failed to find SAI platform device\n");
+		ret = -EPROBE_DEFER;
+		goto fail;
+	}
+	
+	i2client_codec = of_find_i2c_device_by_node(np_AudioCodec);
+	if (!i2client_codec) {
+		dev_err(&pdev->dev, "failed to find codec platform device\n");
+		ret = -EPROBE_DEFER;
+		goto fail;
+	}
+
+	data = devm_kzalloc(&pdev->dev, sizeof(*data), GFP_KERNEL);
+	if(!data) {
+		dev_err(&pdev->dev, "No memory??\n");
+		ret = -ENOMEM;
+		goto fail;
+	}
+	data->pdev=pdev;
+
+        comp = devm_kzalloc(&pdev->dev, 3 * sizeof(*comp), GFP_KERNEL);
+        if (!comp) {
+                ret = -ENOMEM;
+                goto fail;
+        }
+
+	data->codec_mclk = clk_get(&i2client_codec->dev, "mclk");
+	if (IS_ERR(data->codec_mclk)) {
+		ret = PTR_ERR(data->codec_mclk);
+		dev_err(&pdev->dev, "failed to get codec clk: %d\n", ret);
+		goto fail;
+	}
+
+	data->mclk_frequency = clk_get_rate(data->codec_mclk);
+	dev_info(&pdev->dev,"mclk_frequency=%lu\n",data->mclk_frequency);
+
+        data->dai.cpus          = &comp[0];
+        data->dai.codecs        = &comp[1];
+        data->dai.platforms     = &comp[2];
+
+        data->dai.num_cpus      = 1;
+        data->dai.num_codecs    = 1;
+        data->dai.num_platforms = 1;
+
+	/* CPU <--> Codec DAI links  */
+	data->dai.name 	= "HiFi";
+	data->dai.stream_name 	= "HiFi";
+	data->dai.codecs->dai_name = "sgtl5000"; Link2(sgtl5000_dai);
+	data->dai.codecs->of_node = np_AudioCodec;
+//	data->dai.cpus->dai_name = "fsl-sai"; Link2(fsl_component);
+	data->dai.cpus->of_node = np_AudioCpu;
+//	data->dai.platforms->name = "???";
+	data->dai.platforms->of_node = np_AudioCpu;
+	data->dai.init 	= &imx_sgtl5000_dai_init;
+	data->dai.dai_fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF | SND_SOC_DAIFMT_CBM_CFM;
+	
+	data->card.dai_link = &data->dai;
+	data->card.num_links = 1;
+	data->card.dev = &pdev->dev;
+	data->card.owner = THIS_MODULE;
+	data->card.dapm_widgets = imx_sgtl5000_dapm_widgets;
+	data->card.num_dapm_widgets = ARRAY_SIZE(imx_sgtl5000_dapm_widgets);
+	
+	ret = snd_soc_of_parse_card_name(&data->card, "model");
+	if (ret)
+		goto fail;
+	
+	ret = snd_soc_of_parse_audio_routing(&data->card, "audio-routing");
+	if (ret)
+		goto fail;
+
+	platform_set_drvdata(pdev, &data->card);
+	snd_soc_card_set_drvdata(&data->card, data);
+
+	ret = devm_snd_soc_register_card(&pdev->dev, &data->card);
+	if(ret) {
+		dev_err(&pdev->dev, "snd_soc_register_card failed (%d)\n", ret);
+		goto fail;
+	}
+
+	of_node_put(np_AudioCpu);
+	of_node_put(np_AudioCodec);
+	
+	dev_info(&pdev->dev,"%s(%s) done!\n",__func__,dev_name(&pdev->dev));
+
+	return 0;
+
+fail:
+	if(data) {
+		if(!IS_ERR(data->codec_mclk))
+			clk_put(data->codec_mclk);
+		devm_kfree(&pdev->dev,data);
+	}
+		
+	of_node_put(np_AudioCpu);
+	of_node_put(np_AudioCodec);
+
+	return ret;
+}
+
+static int imx8_sgtl5000_remove (struct platform_device *pdev)
+{
+	struct snd_soc_card *card = platform_get_drvdata(pdev);
+	struct imx_sgtl5000_data *data = snd_soc_card_get_drvdata(card);
+	
+	clk_put(data->codec_mclk);
+	
+	return 0;
+}
+
+static const struct of_device_id imx8_sgtl5000_dt_ids[] = {
+	{ .compatible = "fsl,imx8-audio-sgtl5000", },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, imx8_sgtl5000_dt_ids);
+
+static const struct platform_device_id imx8_sgtl5000_platform_ids[] = {
+	{ "imx8-sai-sgtl5000", 0 },
+	{ }
+};
+MODULE_DEVICE_TABLE(platform, imx8_sgtl5000_platform_ids);
+
+static struct platform_driver imx8_sgtl5000_driver = {
+	.driver = {
+		.name = "imx8-sgtl5000",
+		.pm = &snd_soc_pm_ops,
+		.of_match_table = imx8_sgtl5000_dt_ids,
+	},
+	.probe = imx8_sgtl5000_probe,
+	.remove = imx8_sgtl5000_remove,
+	.id_table = imx8_sgtl5000_platform_ids,
+};
+module_platform_driver(imx8_sgtl5000_driver);
+/*
+static int __init imx8_sgtl5000_driver_init (void)
+{ 
+	return platform_driver_register(&imx8_sgtl5000_driver ); 
+} 
+device_initcall_sync(imx8_sgtl5000_driver_init);
+
+static void __exit imx8_sgtl5000_driver_exit (void) 
+{ 
+	platform_driver_unregister(&imx8_sgtl5000_driver ); 
+} 
+module_exit(imx8_sgtl5000_driver_exit);
+*/
+
+MODULE_AUTHOR("Shawn Guo <shawn.guo@linaro.org>");
+MODULE_DESCRIPTION("Freescale i.MX8 SGTL5000 ASoC machine driver");
+MODULE_LICENSE("GPL v2");
+MODULE_ALIAS("platform:imx8-sgtl5000");
-- 
2.17.1


From 6c3c23666916095d9fa57a9350e44112ae0baf45 Mon Sep 17 00:00:00 2001
From: Antony Abee Prakash XV <antonyabee.prakashxv@adlinktech.com>
Date: Mon, 20 Jul 2020 13:55:30 +0530
Subject: [PATCH 5/5] Improve SD/MMC power consumption and speed

The SMARC SDMMC interface has no Card Detect pin, polling caused a constant
CPU load on one core of 10%. But why so much?

Appearently other SD host controllers get their clocks from a PLL, which
may sometimes take up to 20 ms to stabilize if it lost sync. The standard
driver sdhci.c: sdhci_set_clock() checks the 'PLL stable' status flag. I
guess usually the PLL is ready right away, but rarely the driver will have
to wait 1 ms and retry. Only then is the clock gate opened. And because
this happens in atomic context the CPU can't sleep, but must busy-wait.

But the i.MX6's controller has no PLL but a simple divider fed by a 198 MHz
clock. Therefore there is no 'PLL stable' flag.

 - Increased polling interval from 1 to 2 seconds.
 - While debugging tripped over statement in Reference Manual "highly
   recommending" giving preference to the pre-divider when possible. Fixed
   that too.
 - And reorganized register access to avoid a glitch emitting full 198 MHz
   for an instant when switching directly from one speed to another (or
   even the same).

Signed-off-by: Antony Abee Prakash XV <antonyabee.prakashxv@adlinktech.com>
---
 drivers/mmc/core/core.c            |  2 +-
 drivers/mmc/host/sdhci-esdhc-imx.c | 16 +++++++++++-----
 2 files changed, 12 insertions(+), 6 deletions(-)

diff --git a/drivers/mmc/core/core.c b/drivers/mmc/core/core.c
index 1e12131fb0b3..eb73915dbcd0 100644
--- a/drivers/mmc/core/core.c
+++ b/drivers/mmc/core/core.c
@@ -2345,7 +2345,7 @@ void mmc_rescan(struct work_struct *work)
 
  out:
 	if (host->caps & MMC_CAP_NEEDS_POLL)
-		mmc_schedule_delayed_work(&host->detect, HZ);
+		mmc_schedule_delayed_work(&host->detect, HZ*2);
 }
 
 void mmc_start_host(struct mmc_host *host)
diff --git a/drivers/mmc/host/sdhci-esdhc-imx.c b/drivers/mmc/host/sdhci-esdhc-imx.c
index 2ff59d96d7ea..95d3d5ac59ad 100644
--- a/drivers/mmc/host/sdhci-esdhc-imx.c
+++ b/drivers/mmc/host/sdhci-esdhc-imx.c
@@ -825,11 +825,6 @@ static inline void esdhc_pltfm_set_clock(struct sdhci_host *host,
 			pre_div = 2;
 	}
 
-	temp = sdhci_readl(host, ESDHC_SYSTEM_CONTROL);
-	temp &= ~(ESDHC_CLOCK_IPGEN | ESDHC_CLOCK_HCKEN | ESDHC_CLOCK_PEREN
-		| ESDHC_CLOCK_MASK);
-	sdhci_writel(host, temp, ESDHC_SYSTEM_CONTROL);
-
 	if (imx_data->socdata->flags & ESDHC_FLAG_ERR010450) {
 		unsigned int max_clock;
 
@@ -845,6 +840,13 @@ static inline void esdhc_pltfm_set_clock(struct sdhci_host *host,
 	while (host_clock / (div * pre_div * ddr_pre_div) > clock && div < 16)
 		div++;
 
+	/* i.MX6 Reference Manual says if same freq can be achieved with pre_div
+	 * or div, setting pre_div "is highly recommended". */
+	while (!(div % 2) && pre_div < 256) {
+		pre_div *= 2;
+		div /= 2;
+	}
+
 	host->mmc->actual_clock = host_clock / (div * pre_div * ddr_pre_div);
 	dev_dbg(mmc_dev(host->mmc), "desired SD clock: %d, actual: %d\n",
 		clock, host->mmc->actual_clock);
@@ -853,6 +855,10 @@ static inline void esdhc_pltfm_set_clock(struct sdhci_host *host,
 	div--;
 
 	temp = sdhci_readl(host, ESDHC_SYSTEM_CONTROL);
+	temp &= ~(ESDHC_CLOCK_IPGEN | ESDHC_CLOCK_HCKEN | ESDHC_CLOCK_PEREN);
+	sdhci_writel(host, temp, ESDHC_SYSTEM_CONTROL);
+
+	temp &= ~ESDHC_CLOCK_MASK;
 	temp |= (ESDHC_CLOCK_IPGEN | ESDHC_CLOCK_HCKEN | ESDHC_CLOCK_PEREN
 		| (div << ESDHC_DIVIDER_SHIFT)
 		| (pre_div << ESDHC_PREDIV_SHIFT));
-- 
2.17.1


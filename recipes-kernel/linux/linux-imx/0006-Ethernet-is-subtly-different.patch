From 7b26e6960570a22a67dd855a8f8b2ad780ec7459 Mon Sep 17 00:00:00 2001
From: Antony Abee Prakash XV <antonyabee.prakashxv@adlinktech.com>
Date: Mon, 20 Jul 2020 17:49:08 +0530
Subject: [PATCH 6/6] Ethernet is subtly different

- Correct RGMII_nRST GPIO polarity.
- Atheros recommended adding a 22 Ohm serial resistor to RGMII_TXCLK,
  however measurement shows a smaller value is slightly better. Instead of
  another BOM change simply reduce the resistor at the i.MX6 output (i.e.
  increase drive strength) from 37 to 31 Ohm.
- We use pad GPIO16 for something else, no ENET_REF_CLK. A note in the
  SabreSD reference schematics says "This pin [GPIO_16] must be unconnected
  for Ethernet 1588 (time stamp) [Precision Time Protocol, PTP]
  functionality to work," but the smaller AR8035 doesn't support PTP
  anyway.
- Added PHY reset GPIO pinmux which was in the 'hog' group originally and removed
  it from hog group.
- RGMII_INT is connected exactly like on Freescale's SabreSD board, but
  their device tree file doesn't mention it anywhere so we won't either.
  With this signal Wake-on-LAN could be handled by the PHY alone, allowing
  to save more power by putting the i.MX6 MAC to sleep, however Freescale's
  driver doesn't support this and keeps the MAC awake for Wake-on-LAN.
- We have longer RGMII traces and (since A4) a serial resistor in TXC. This
  seems to have shifted the signal slightly, the GTX_CLK delay register in
  the phy must be changed from 2.4 (default) to 1.3 ns so the clock edge
  hits the data bits properly again.

Signed-off-by: Antony Abee Prakash XV <antonyabee.prakashxv@adlinktech.com>
---
 arch/arm/boot/dts/lec-imx6.dtsi | 22 ++++++++++++----------
 arch/arm/mach-imx/mach-imx6q.c  |  9 +++++++++
 2 files changed, 21 insertions(+), 10 deletions(-)

diff --git a/arch/arm/boot/dts/lec-imx6.dtsi b/arch/arm/boot/dts/lec-imx6.dtsi
index b675eb97f91f..22582fb8f837 100644
--- a/arch/arm/boot/dts/lec-imx6.dtsi
+++ b/arch/arm/boot/dts/lec-imx6.dtsi
@@ -349,7 +349,11 @@
 	pinctrl-names = "default";
 	pinctrl-0 = <&pinctrl_enet>;
 	phy-mode = "rgmii-id";
-	phy-reset-gpios = <&gpio1 25 GPIO_ACTIVE_LOW>;
+	phy-reset-gpios = <&gpio1 25 GPIO_ACTIVE_LOW>;	/* RGMII_nRST */
+	/* Can't power off phy because sw2_reg is permanently needed. We could
+	 * turn off i.MX6's NVCC_RGMII (I/O voltage) only, but that's risky when
+	 * the phy remains powered. */
+	//phy-supply = <&vgen1_reg>;
 	fsl,magic-packet;
 	status = "okay";
 };
@@ -692,7 +696,6 @@
 				MX6QDL_PAD_NANDF_CLE__GPIO6_IO07 0x1b0b0
 				MX6QDL_PAD_ENET_TXD1__GPIO1_IO29 0x1b0b0
 				MX6QDL_PAD_EIM_D22__GPIO3_IO22  0x1b0b0
-				MX6QDL_PAD_ENET_CRS_DV__GPIO1_IO25 0x1b0b0
 				MX6QDL_PAD_EIM_CS1__GPIO2_IO24 0x80000000
 				MX6QDL_PAD_ENET_RXD0__GPIO1_IO27 0x80000000
 				MX6QDL_PAD_EIM_A25__GPIO5_IO02 0x80000000
@@ -725,7 +728,7 @@
 			fsl,pins = <
 				MX6QDL_PAD_ENET_MDIO__ENET_MDIO		0x1b0b0
 				MX6QDL_PAD_ENET_MDC__ENET_MDC		0x1b0b0
-				MX6QDL_PAD_RGMII_TXC__RGMII_TXC		0x1b030
+				MX6QDL_PAD_RGMII_TXC__RGMII_TXC		0x1b0b8	/* serial resistor added */
 				MX6QDL_PAD_RGMII_TD0__RGMII_TD0		0x1b030
 				MX6QDL_PAD_RGMII_TD1__RGMII_TD1		0x1b030
 				MX6QDL_PAD_RGMII_TD2__RGMII_TD2		0x1b030
@@ -738,13 +741,12 @@
 				MX6QDL_PAD_RGMII_RD2__RGMII_RD2		0x1b030
 				MX6QDL_PAD_RGMII_RD3__RGMII_RD3		0x1b030
 				MX6QDL_PAD_RGMII_RX_CTL__RGMII_RX_CTL	0x1b030
-				MX6QDL_PAD_GPIO_16__ENET_REF_CLK	0x4001b0a8
-			>;
-		};
-
-		pinctrl_enet_irq: enetirqgrp {
-			fsl,pins = <
-				MX6QDL_PAD_GPIO_6__ENET_IRQ		0x000b1
+				MX6QDL_PAD_ENET_CRS_DV__GPIO1_IO25	0x80000000 /* RGMII_nRST */
+				//MX6QDL_PAD_ENET_RXD1__GPIO1_IO26	0x80000000 /* RGMII_INT */
+				/* For the workaround improving network latency described in i.MX6
+				 * erratum 6687 disable the power button, re-mux as follows and
+				 * add "interrupts-extended" as in imx6q-sabresd-enetirq.dts. */
+				//MX6QDL_PAD_GPIO_6__ENET_IRQ		0x000b1
 			>;
 		};
 
diff --git a/arch/arm/mach-imx/mach-imx6q.c b/arch/arm/mach-imx/mach-imx6q.c
index 730ce83eee0e..038b8ccf47f8 100644
--- a/arch/arm/mach-imx/mach-imx6q.c
+++ b/arch/arm/mach-imx/mach-imx6q.c
@@ -162,6 +162,15 @@ static int ar8035_phy_fixup(struct phy_device *dev)
 	 */
 	ar8031_phy_fixup(dev);
 
+	/* The LEC-iMX6 has longer traces and serial resistors in CLK. */
+	if (of_machine_is_compatible("adlink,lec-imx6")) {
+		/* Change GTX_CLK delay from 2.4 (default) to 1.3 ns. */
+		phy_write(dev, 0x1D, 0x0B);
+		val = phy_read(dev, 0x1E);
+		val = (val & ~0x0060) | 0x0020;
+		phy_write(dev, 0x1E, val);
+	}
+
 	/*check phy power*/
 	val = phy_read(dev, 0x0);
 	if (val & BMCR_PDOWN)
-- 
2.17.1


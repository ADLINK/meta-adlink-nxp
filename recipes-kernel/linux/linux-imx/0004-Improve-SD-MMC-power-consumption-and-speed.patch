From 7be9cb3cbc6da7173ff3f2f6c5a6723ebcd513e3 Mon Sep 17 00:00:00 2001
From: Santhana Kumar <santhanakumar.a@ltts.com>
Date: Thu, 4 Apr 2019 14:52:41 +0530
Subject: [PATCH 04/47] Improve SD/MMC power consumption and speed.

The SMARC SDMMC interface has no Card Detect pin, polling caused a constant
CPU load on one core of 10%. But why so much?

Appearently other SD host controllers get their clocks from a PLL, which
may sometimes take up to 20 ms to stabilize if it lost sync. The standard
driver sdhci.c: sdhci_set_clock() checks the 'PLL stable' status flag. I
guess usually the PLL is ready right away, but rarely the driver will have
to wait 1 ms and retry. Only then is the clock gate opened. And because
this happens in atomic context the CPU can't sleep, but must busy-wait.

But the i.MX6's controller has no PLL but a simple divider fed by a 198 MHz
clock. Therefore there is no 'PLL stable' flag. But my guess is the
Freescale guys copied the sdhci.c code and weren't sure what to do about
this loop, waiting for a flag their hardware didn't have. They deleted the
loop but kept the 1 ms wait. But now the driver would not busy-wait only
rarely, if the flag is set, but every time the function was called.

And when USDHC support was added later the mdelay() even got accidentally
moved after opening the clock gate, so if I understand things right it's
now both unneccassary and at the wrong place.

 - Deleted the wasteful mdelay().
 - Also increased polling interval from 1 to 2 seconds.
 - While debugging tripped over statement in Reference Manual "highly
   recommending" giving preference to the pre-divider when possible. Fixed
   that too.
 - And reorganized register access to avoid a glitch emitting full 198 MHz
   for an instant when switching directly from one speed to another (or
   even the same).

Result (measured on Solo): polling CPU load dropped from 10% to 1%, power
reduced by 0.05 W = 1.5% of total module idle power, on-module eMMC speed
increased from 18 to 24 MB/s = +33%.

The speed gain only applies when sdhci_set_clock() gets called often with
CONFIG_MMC_CLKGATE=y. However, later I was forced to disable it, because
sporadic I/O errors occured after 'trim' commands (not normal r/w) to the
on-module eMMC (not the SD, uSD slots) on i.MX6 Q/D (not S/DL). I think
fixing the 198 MHz glich took care of the trim errors already, but I was
unable to reproduce them reliably, so I disabled MMC_CLKGATE to be sure.
Freescale keeps it disabled, too, I couldn't measure any power saving but I
think constantly toggling the clock costs a tiny bit performance, so it's
not a loss.

Signed-off-by: Santhana Kumar <santhanakumar.a@ltts.com>
---
 drivers/mmc/core/core.c            |  2 +-
 drivers/mmc/host/sdhci-esdhc-imx.c | 20 ++++++++++++--------
 2 files changed, 13 insertions(+), 9 deletions(-)

diff --git a/drivers/mmc/core/core.c b/drivers/mmc/core/core.c
index 905211e..f084d38 100644
--- a/drivers/mmc/core/core.c
+++ b/drivers/mmc/core/core.c
@@ -2789,7 +2789,7 @@ void mmc_rescan(struct work_struct *work)
 
  out:
 	if (host->caps & MMC_CAP_NEEDS_POLL)
-		mmc_schedule_delayed_work(&host->detect, HZ);
+		mmc_schedule_delayed_work(&host->detect, HZ*2);
 }
 
 void mmc_start_host(struct mmc_host *host)
diff --git a/drivers/mmc/host/sdhci-esdhc-imx.c b/drivers/mmc/host/sdhci-esdhc-imx.c
index 976bfdf..94b650e 100644
--- a/drivers/mmc/host/sdhci-esdhc-imx.c
+++ b/drivers/mmc/host/sdhci-esdhc-imx.c
@@ -790,11 +790,6 @@ static inline void esdhc_pltfm_set_clock(struct sdhci_host *host,
 			pre_div = 2;
 	}
 
-	temp = sdhci_readl(host, ESDHC_SYSTEM_CONTROL);
-	temp &= ~(ESDHC_CLOCK_IPGEN | ESDHC_CLOCK_HCKEN | ESDHC_CLOCK_PEREN
-		| ESDHC_CLOCK_MASK);
-	sdhci_writel(host, temp, ESDHC_SYSTEM_CONTROL);
-
 	if (imx_data->socdata->flags & ESDHC_FLAG_ERR010450) {
 		if (imx_data->is_ddr)
 			clock = clock > 45000000 ? 45000000 : clock;
@@ -809,6 +804,13 @@ static inline void esdhc_pltfm_set_clock(struct sdhci_host *host,
 	while (host_clock / (div * pre_div * ddr_pre_div) > clock && div < 16)
 		div++;
 
+	/* i.MX6 Reference Manual says if same freq can be achieved with pre_div
+	 * or div, setting pre_div "is highly recommended". */
+	while (!(div % 2) && pre_div < 256) {
+		pre_div *= 2;
+		div /= 2;
+	}
+
 	host->mmc->actual_clock = host_clock / (div * pre_div * ddr_pre_div);
 	dev_dbg(mmc_dev(host->mmc), "desired SD clock: %d, actual: %d\n",
 		clock, host->mmc->actual_clock);
@@ -817,6 +819,10 @@ static inline void esdhc_pltfm_set_clock(struct sdhci_host *host,
 	div--;
 
 	temp = sdhci_readl(host, ESDHC_SYSTEM_CONTROL);
+	temp &= ~(ESDHC_CLOCK_IPGEN | ESDHC_CLOCK_HCKEN | ESDHC_CLOCK_PEREN);
+	sdhci_writel(host, temp, ESDHC_SYSTEM_CONTROL);
+
+	temp &=	~ESDHC_CLOCK_MASK;
 	temp |= (ESDHC_CLOCK_IPGEN | ESDHC_CLOCK_HCKEN | ESDHC_CLOCK_PEREN
 		| (div << ESDHC_DIVIDER_SHIFT)
 		| (pre_div << ESDHC_PREDIV_SHIFT));
@@ -825,10 +831,8 @@ static inline void esdhc_pltfm_set_clock(struct sdhci_host *host,
 	if (esdhc_is_usdhc(imx_data)) {
 		val = readl(host->ioaddr + ESDHC_VENDOR_SPEC);
 		writel(val | ESDHC_VENDOR_SPEC_FRC_SDCLK_ON,
-		host->ioaddr + ESDHC_VENDOR_SPEC);
+		       host->ioaddr + ESDHC_VENDOR_SPEC);
 	}
-
-	mdelay(1);
 }
 
 static unsigned int esdhc_pltfm_get_ro(struct sdhci_host *host)
-- 
2.7.4


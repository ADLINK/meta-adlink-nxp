From ac85c02576e9eb6bfab31c06edb5315acb35e2b2 Mon Sep 17 00:00:00 2001
From: Antony Abee Prakash XV <antonyabee.prakashxv@adlinktech.com>
Date: Thu, 6 Aug 2020 11:47:22 +0530
Subject: [PATCH 23/23] Adapt camera interfaces

- Add CONFIG vars to ease connecting OV564x cameras.
- Use I2C_CAM aka i2c1.
- We can't control the power supplies.
- Different power-down and reset GPIOs. (Don't know what to do with
  PCAM_FLD.)
- Different pinmux for parallel interface: 10 bits instead of 8, but no
  DATA_EN. We share the generic SMARC GPIOs, so these are already mapped.
- Just drop everything related to MIPI-DSI (conflicting with camera pinmux).
  We can't use the MIPI-DSI display interface.
- Set up CSI2IPU muxes in board file to allow connecting both serial and
  parallel cameras. See chapter "MIPI CSI to IPU gasket" in i.MX6 Reference
  Manual.
- Fix heavy flickering when moving camera window by adding a shortcut code path to the driver:
  if already initialized and the overlay window's size is unchanged then just adjust the
  position. Otherwise the full setup is done as before.
- Work around OV564x cameras blocking I2C bus:
	Whenever the Ovti OV564x camera chip exits Software Power Down, i.e. bit 6
	of reg 0x3008 (SYSTEM CONTROL00) is changed 1->0, for some reason the I2C
	bus gets blocked. The next transfer fails, even if aimed at a different
	device (on the same bus).
	As a workaround issue a dummy read immediately afterwards, any following
	I2C access will then be fine again.

Signed-off-by: Antony Abee Prakash XV <antonyabee.prakashxv@adlinktech.com>
---
 arch/arm/boot/dts/lec-imx6.dtsi               | 120 +++++++-----------
 arch/arm/mach-imx/mach-imx6q.c                |  34 +++--
 .../platform/mxc/capture/ipu_fg_overlay_sdc.c |  23 +++-
 .../platform/mxc/capture/mxc_v4l2_capture.h   |   1 +
 drivers/media/platform/mxc/capture/ov5640.c   |  14 ++
 .../media/platform/mxc/capture/ov5640_mipi.c  |  20 ++-
 6 files changed, 117 insertions(+), 95 deletions(-)

diff --git a/arch/arm/boot/dts/lec-imx6.dtsi b/arch/arm/boot/dts/lec-imx6.dtsi
index 464defe5115b..fe52135a65c4 100644
--- a/arch/arm/boot/dts/lec-imx6.dtsi
+++ b/arch/arm/boot/dts/lec-imx6.dtsi
@@ -7,10 +7,18 @@
  * 1=TI TLV320AIC23 on LEC-Base R1 carrier, 2=Freescale SGTL5000 on LEC-Base R2 */
 #define CONFIG_I2S_AUDIO       1
 
+/* The LEC-Base carrier doesn't include cameras, but allows connecting some. */
+#define CONFIG_SER_CAMERA      3c /* I2C addr of serial camera, hex without "0x" */
+//#define CONFIG_PAR_CAMERA    3c /* I2C addr of parallel camera */
+
 #include <dt-bindings/clock/imx6qdl-clock.h>
 #include <dt-bindings/gpio/gpio.h>
 #include <dt-bindings/input/input.h>
 
+#define __0x(X) 0x##X  /* prefix hex digits with "0x" */
+#define _0x(X) __0x(X)
+
+
 / {
 	aliases {
 		mxcfb0 = &mxcfb1;
@@ -114,13 +122,6 @@
 		hdmi-5v-supply = <&swbst_reg>;
     };
 
-	reg_mipi_dsi_pwr_on: mipi_dsi_pwr_on {
-		compatible = "regulator-fixed";
-		regulator-name = "mipi_dsi_pwr_on";
-		gpio = <&gpio6 14 0>;
-		enable-active-high;
-	};
-
 	gpio-keys {
 		compatible = "gpio-keys";
 		pinctrl-names = "default";
@@ -253,6 +254,7 @@
 	//	};
 	//};
 
+#ifdef CONFIG_PAR_CAMERA
 	v4l2_cap_0 {
 		compatible = "fsl,imx6q-v4l2-capture";
 		ipu_id = <0>;
@@ -260,7 +262,9 @@
 		mclk_source = <0>;
 		status = "okay";
 	};
+#endif
 
+#ifdef CONFIG_SER_CAMERA
 	v4l2_cap_1 {
 		compatible = "fsl,imx6q-v4l2-capture";
 		ipu_id = <0>;
@@ -268,6 +272,7 @@
 		mclk_source = <0>;
 		status = "okay";
 	};
+#endif
 
 	v4l2_out {
 		compatible = "fsl,mxc_v4l2_output";
@@ -293,35 +298,15 @@
 	pinctrl-0 = <&pinctrl_ipu1_csi0>;
 };
 
+#ifdef CONFIG_SER_CAMERA
 &mipi_csi {
-	status = "okay";
-
 	ipu_id = <0>;
 	csi_id = <1>;
 	v_channel = <0>;
 	lanes = <2>;
-#if 0
-	port@0 {
-		reg = <0>;
-
-		mipi_csi2_in: endpoint {
-			remote-endpoint = <&ov5640_to_mipi_csi2>;
-			clock-lanes = <0>;
-			data-lanes = <1 2>;
-		};
-	};
-#endif
-};
-
-&mipi_dsi {
-        dev_id = <0>;
-        disp_id = <1>;
-        lcd_panel = "TRULY-WVGA";
-        disp-power-on-supply = <&reg_mipi_dsi_pwr_on>;
-        reset-gpios = <&gpio6 11 GPIO_ACTIVE_LOW>;
-        reset-delay-us = <50>;
-        status = "okay";
+	status = "okay";
 };
+#endif
 
 #if CONFIG_I2S_AUDIO
 &audmux {	/* SMARC I2S0 (instead of SPI0) */
@@ -495,33 +480,6 @@
 		reg = <0x58>;
 	};
 
-#if 0
-	ov5642: camera@3c {
-		compatible = "ovti,ov5642";
-		pinctrl-names = "default";
-		pinctrl-0 = <&pinctrl_ov5642>;
-		clocks = <&clks IMX6QDL_CLK_CKO>;
-		clock-names = "xclk";
-		reg = <0x3c>;
-		DOVDD-supply = <&vgen4_reg>; /* 1.8v */
-		AVDD-supply = <&vgen3_reg>;  /* 2.8v, rev C board is VGEN3
-						rev B board is VGEN5 */
-		DVDD-supply = <&vgen2_reg>;  /* 1.5v*/
-		powerdown-gpios = <&gpio1 16 GPIO_ACTIVE_HIGH>;
-		reset-gpios = <&gpio1 17 GPIO_ACTIVE_LOW>;
-		status = "disabled";
-
-		port {
-			ov5642_to_ipu1_csi0_mux: endpoint {
-				remote-endpoint = <&ipu1_csi0_mux_from_parallel_sensor>;
-				bus-width = <8>;
-				hsync-active = <1>;
-				vsync-active = <1>;
-			};
-		};
-	};
-#endif
-
        carrier_misc_control: pcf8575@20 {      /* GPIO expander on LEC-Base R1 carrier */
                compatible = "nxp,pcf8575";
                reg = <0x20>;
@@ -538,22 +496,35 @@
                lines-initial-states = <0xc001>; /* bitmask: 0=high(!)/input, 1=pulled low */
        };
 
-	ov564x: ov564x@3c {
+#ifdef CONFIG_PAR_CAMERA
+	ov564x@CONFIG_PAR_CAMERA {	/* Parallel camera connected to carrier */
 		compatible = "ovti,ov564x";
-		reg = <0x3c>;
+		reg = <_0x(CONFIG_PAR_CAMERA)>;
 		pinctrl-names = "default";
-		pinctrl-0 = <&pinctrl_ipu1_2>;
+		pinctrl-0 = <&pinctrl_ipu1_pcam>;
 		clocks = <&clks IMX6QDL_CLK_CKO>;
 		clock-names = "csi_mclk";
-		DOVDD-supply = <&vgen4_reg>; /* 1.8v */
-		AVDD-supply = <&vgen3_reg>;  /* 2.8v, on rev C board is VGEN3, on rev B board is VGEN5 */
-		DVDD-supply = <&vgen2_reg>;  /* 1.5v*/
-		pwn-gpios = <&gpio1 16 1>;   /* active low: SD1_DAT0 */
-		rst-gpios = <&gpio1 17 0>;   /* active high: SD1_DAT1 */
-		csi_id = <0>;
+		pwn-gpios = <&gpio6 14 GPIO_ACTIVE_HIGH>; /* SMARC GPIO1/CAM1_PWR# */
+		rst-gpios = <&gpio6 16 GPIO_ACTIVE_LOW>;  /* SMARC GPIO3/CAM1_RST# */
+		csi_id = <0>; /* but on SMARC CSI1_...! */
+		mclk = <24000000>;
+		mclk_source = <0>;
+	};
+#endif
+
+#ifdef CONFIG_SER_CAMERA
+	ov564x_mipi@CONFIG_SER_CAMERA {         /* Serial camera connected to carrier */
+		compatible = "ovti,ov564x_mipi";
+		reg = <_0x(CONFIG_SER_CAMERA)>;
+		clocks = <&clks IMX6QDL_CLK_CKO>;
+		clock-names = "csi_mclk";
+		pwn-gpios = <&gpio6 11 GPIO_ACTIVE_HIGH>; /* SMARC GPIO0/CAM0_PWR# */
+		rst-gpios = <&gpio6 15 GPIO_ACTIVE_LOW>;  /* SMARC GPIO2/CAM0_RST# */
+		csi_id = <1>; /* but on SMARC CSI0_...! */
 		mclk = <24000000>;
 		mclk_source = <0>;
 	};
+#endif
 };
 
 &i2c2 {		/* PFUZE100 PMIC, SMARC I2C_LCD, SMARC I2C_GP */
@@ -776,7 +747,10 @@
 				MX6QDL_PAD_KEY_ROW2__GPIO4_IO11	0x80000000 /* SMARC SDIO_PWR_EN */
 				MX6QDL_PAD_EIM_D23__GPIO3_IO23 0x80000000
 				MX6QDL_PAD_SD3_RST__GPIO7_IO08 0x80000000
-				MX6QDL_PAD_NANDF_CS0__GPIO6_IO11 0x80000000
+				MX6QDL_PAD_NANDF_CS0__GPIO6_IO11 0x80000000 /* SMARC GPIO0/CAM0_PWR# */
+				MX6QDL_PAD_NANDF_CS1__GPIO6_IO14 0x80000000 /* SMARC GPIO1/CAM1_PWR# */
+				MX6QDL_PAD_NANDF_CS2__GPIO6_IO15 0x80000000 /* SMARC GPIO2/CAM0_RST# */
+				MX6QDL_PAD_NANDF_CS3__GPIO6_IO16 0x80000000 /* SMARC GPIO3/CAM1_RST# */
 			>;
 		};
 
@@ -942,8 +916,11 @@
 			>;
 		};
 
-		pinctrl_ipu1_2: ipu1grp-2 { /* parallel camera */
-			fsl,pins = <
+#ifdef CONFIG_PAR_CAMERA
+		pinctrl_ipu1_pcam: ipu1_pcamgrp {
+			fsl,pins = <	/* SMARC PCAM */
+				MX6QDL_PAD_CSI0_DAT10__IPU1_CSI0_DATA10    0x80000000
+				MX6QDL_PAD_CSI0_DAT11__IPU1_CSI0_DATA11    0x80000000
 				MX6QDL_PAD_CSI0_DAT12__IPU1_CSI0_DATA12    0x80000000
 				MX6QDL_PAD_CSI0_DAT13__IPU1_CSI0_DATA13    0x80000000
 				MX6QDL_PAD_CSI0_DAT14__IPU1_CSI0_DATA14    0x80000000
@@ -952,15 +929,12 @@
 				MX6QDL_PAD_CSI0_DAT17__IPU1_CSI0_DATA17    0x80000000
 				MX6QDL_PAD_CSI0_DAT18__IPU1_CSI0_DATA18    0x80000000
 				MX6QDL_PAD_CSI0_DAT19__IPU1_CSI0_DATA19    0x80000000
-				MX6QDL_PAD_CSI0_DATA_EN__IPU1_CSI0_DATA_EN 0x80000000
 				MX6QDL_PAD_CSI0_PIXCLK__IPU1_CSI0_PIXCLK   0x80000000
 				MX6QDL_PAD_CSI0_MCLK__IPU1_CSI0_HSYNC      0x80000000
 				MX6QDL_PAD_CSI0_VSYNC__IPU1_CSI0_VSYNC     0x80000000
-				MX6QDL_PAD_SD1_DAT1__GPIO1_IO17            0x80000000
-				MX6QDL_PAD_SD1_DAT0__GPIO1_IO16            0x80000000
 			>;
 		};
-
+#endif
 		pinctrl_ipu1_csi0: ipu1csi0grp {
 			fsl,pins = <
 				MX6QDL_PAD_CSI0_DAT12__IPU1_CSI0_DATA12    0x1b0b0
diff --git a/arch/arm/mach-imx/mach-imx6q.c b/arch/arm/mach-imx/mach-imx6q.c
index 038b8ccf47f8..d6d84d7aaf1d 100644
--- a/arch/arm/mach-imx/mach-imx6q.c
+++ b/arch/arm/mach-imx/mach-imx6q.c
@@ -260,18 +260,28 @@ static void __init imx6q_csi_mux_init(void)
 	struct regmap *gpr;
 
 	gpr = syscon_regmap_lookup_by_compatible("fsl,imx6q-iomuxc-gpr");
-	if (!IS_ERR(gpr)) {
-		if (of_machine_is_compatible("fsl,imx6q-sabresd") ||
-			of_machine_is_compatible("fsl,imx6q-sabreauto") ||
-			of_machine_is_compatible("fsl,imx6qp-sabresd") ||
-			of_machine_is_compatible("fsl,imx6qp-sabreauto"))
-			regmap_update_bits(gpr, IOMUXC_GPR1, 1 << 19, 1 << 19);
-		else if (of_machine_is_compatible("fsl,imx6dl-sabresd") ||
-			 of_machine_is_compatible("fsl,imx6dl-sabreauto"))
-			regmap_update_bits(gpr, IOMUXC_GPR13, 0x3F, 0x0C);
-	} else {
-		pr_err("%s(): failed to find fsl,imx6q-iomux-gpr regmap\n",
-		       __func__);
+
+	if (IS_ERR(gpr)) {
+		pr_err("failed to find fsl,imx6q-iomux-gpr regmap\n");
+		return;
+	}
+
+	if (of_machine_is_compatible("fsl,imx6q-sabresd") ||
+			of_machine_is_compatible("fsl,imx6q-sabreauto"))
+		regmap_update_bits(gpr, IOMUXC_GPR1, 1 << 19, 1 << 19);
+	else if (of_machine_is_compatible("fsl,imx6dl-sabresd") ||
+			of_machine_is_compatible("fsl,imx6dl-sabreauto"))
+		regmap_update_bits(gpr, IOMUXC_GPR13, 0x3F, 0x0C);
+
+	if (of_machine_is_compatible("adlink,lec-imx6")) {
+		if (of_machine_is_compatible("fsl,imx6q"))
+			regmap_update_bits(gpr, IOMUXC_GPR1, 0x3 << 19,
+					  (0 << 20) | /* IPU2 CSI1: 0=MIPI (virt.ch.=3), 1=parallel */
+					  (1 << 19)); /* IPU1 CSI0: 0=MIPI (virt.ch.=0), 1=parallel */
+		else                      /* "fsl,imx6dl" */
+			regmap_update_bits(gpr, IOMUXC_GPR13, 0x3F << 0,
+					  (1 << 3) | /* IPU CSI1: 0-3=MIPI virt.ch. nr., 4=parallel */
+					  (4 << 0)); /* IPU CSI0: 0-3=MIPI virt.ch. nr., 4=parallel */
 	}
 }
 
diff --git a/drivers/media/platform/mxc/capture/ipu_fg_overlay_sdc.c b/drivers/media/platform/mxc/capture/ipu_fg_overlay_sdc.c
index 9e2a73032250..48c8f4d71c07 100644
--- a/drivers/media/platform/mxc/capture/ipu_fg_overlay_sdc.c
+++ b/drivers/media/platform/mxc/capture/ipu_fg_overlay_sdc.c
@@ -353,11 +353,6 @@ static int foreground_start(void *private)
 		return -EIO;
 	}
 
-	if (cam->overlay_active == true) {
-		pr_debug("already started.\n");
-		return 0;
-	}
-
 	get_disp_ipu(cam);
 
 	for (i = 0; i < num_registered_fb; i++) {
@@ -374,10 +369,20 @@ static int foreground_start(void *private)
 		return -EPERM;
 	}
 
+	/* Shortcut, eliminates heavy flickering when someone simply moves the
+	 * window. If resizing we still do the full setup. */
+	if (cam->overlay_active && fbi->var.xres == cam->win.w.width
+			&& fbi->var.yres == cam->win.w.height) {
+		ipu_disp_set_window_pos(disp_ipu, MEM_FG_SYNC, cam->win.w.left,
+				cam->win.w.top);
+		return 0;
+	}
+
 	fbvar = fbi->var;
 
 	/* Store the overlay frame buffer's original std */
-	cam->fb_origin_std = fbvar.nonstd;
+	if (!cam->overlay_active)
+		cam->fb_origin_std = fbvar.nonstd;
 
 	if (cam->devtype == IMX5_V4L2 || cam->devtype == IMX6_V4L2) {
 		/* Use DP to do CSC so that we can get better performance */
@@ -425,6 +430,11 @@ static int foreground_start(void *private)
 	ipu_update_channel_buffer(disp_ipu, MEM_FG_SYNC, IPU_INPUT_BUFFER,
 					1, fbi->fix.smem_start);
 
+	if (cam->overlay_active) {
+		pr_debug("already started.\n");
+		return 0;
+	}
+
 	err = csi_enc_enabling_tasks(cam);
 	if (err != 0) {
 		printk(KERN_ERR "Error csi enc enable fail\n");
@@ -576,7 +586,6 @@ int foreground_sdc_select(void *private)
 		cam->vf_stop_sdc = foreground_stop;
 		cam->vf_enable_csi = foreground_enable_csi;
 		cam->vf_disable_csi = foreground_disable_csi;
-		cam->overlay_active = false;
 	} else
 		err = -EIO;
 
diff --git a/drivers/media/platform/mxc/capture/mxc_v4l2_capture.h b/drivers/media/platform/mxc/capture/mxc_v4l2_capture.h
index 6c800cb7b8de..fe3ed3a5e86e 100644
--- a/drivers/media/platform/mxc/capture/mxc_v4l2_capture.h
+++ b/drivers/media/platform/mxc/capture/mxc_v4l2_capture.h
@@ -233,6 +233,7 @@ struct sensor_data {
 	struct v4l2_pix_format pix;
 	struct v4l2_captureparm streamcap;
 	bool on;
+	bool sw_power_down; /* mirrors bit 6 of SYSTEM CONTROL00 reg */
 
 	/* control settings */
 	int brightness;
diff --git a/drivers/media/platform/mxc/capture/ov5640.c b/drivers/media/platform/mxc/capture/ov5640.c
index ab3848c5a63b..0a0a8b27219d 100644
--- a/drivers/media/platform/mxc/capture/ov5640.c
+++ b/drivers/media/platform/mxc/capture/ov5640.c
@@ -704,6 +704,20 @@ static s32 ov5640_write_reg(u16 reg, u8 val)
 		return -1;
 	}
 
+	/* Weird issue: whenever the OV564x exits Software Power Down, i.e.
+	 * bit 6 of reg 0x3008 (SYSTEM CONTROL00) is changed 1->0, somehow the
+	 * I2C bus gets blocked. The next transfer fails, even if addressed
+	 * at a different device (on the same bus).
+	 * Workaround: issue a dummy read immediately afterwards, the following
+	 * I2C access will be fine again. */
+	if (reg == 0x3008) { /* SYSTEM CONTROL00 */
+		bool new_power_down = val & 0x40;
+		if (ov5640_data.sw_power_down && !new_power_down)
+		/* dummy read, is allowed to fail */
+			i2c_master_recv(ov5640_data.i2c_client, au8Buf, 1);
+		ov5640_data.sw_power_down = new_power_down;
+	}
+
 	return 0;
 }
 
diff --git a/drivers/media/platform/mxc/capture/ov5640_mipi.c b/drivers/media/platform/mxc/capture/ov5640_mipi.c
index 118174af2c65..f6c5eeb855f8 100644
--- a/drivers/media/platform/mxc/capture/ov5640_mipi.c
+++ b/drivers/media/platform/mxc/capture/ov5640_mipi.c
@@ -742,7 +742,7 @@ static int ov5640_power_on(struct device *dev)
 				"%s:io set voltage ok\n", __func__);
 		}
 	} else {
-		pr_err("%s: cannot get io voltage error\n", __func__);
+		pr_warn("%s: cannot get io voltage\n", __func__);
 		io_regulator = NULL;
 	}
 
@@ -761,7 +761,7 @@ static int ov5640_power_on(struct device *dev)
 		}
 	} else {
 		core_regulator = NULL;
-		pr_err("%s: cannot get core voltage error\n", __func__);
+		pr_warn("%s: cannot get core voltage\n", __func__);
 	}
 
 	analog_regulator = devm_regulator_get(dev, "AVDD");
@@ -780,7 +780,7 @@ static int ov5640_power_on(struct device *dev)
 		}
 	} else {
 		analog_regulator = NULL;
-		pr_err("%s: cannot get analog voltage error\n", __func__);
+		pr_warn("%s: cannot get analog voltage\n", __func__);
 	}
 
 	return ret;
@@ -815,6 +815,20 @@ static s32 ov5640_write_reg(u16 reg, u8 val)
 		return -1;
 	}
 
+	/* Weird issue: whenever the OV564x exits Software Power Down, i.e.
+	 * bit 6 of reg 0x3008 (SYSTEM CONTROL00) is changed 1->0, somehow the
+	 * I2C bus gets blocked. The next transfer fails, even if addressed
+	 * at a different device (on the same bus).
+	 * Workaround: issue a dummy read immediately afterwards, the following
+	 * I2C access will be fine again. */
+	if (reg == 0x3008) { /* SYSTEM CONTROL00 */
+		bool new_power_down = val & 0x40;
+		if (ov5640_data.sw_power_down && !new_power_down)
+			/* dummy read, is allowed to fail */
+			i2c_master_recv(ov5640_data.i2c_client, au8Buf, 1);
+		ov5640_data.sw_power_down = new_power_down;
+	}
+
 	return 0;
 }
 
-- 
2.17.1


From 5f9c205b9f49f29e9a0513138eb69b6f8757fdde Mon Sep 17 00:00:00 2001
From: Antony Abee Prakash XV <antonyabee.prakashxv@adlinktech.com>
Date: Thu, 2 Jul 2020 12:08:52 +0530
Subject: [PATCH 13/13] Add-external-thermal-sensor-support

This patch will add support for external thermal sensor in i2c4 bus
to get the system temperature and provide it to thermal monitoring unit
inorder to handle critical temperature.

Signed-off-by: Antony Abee Prakash XV <antonyabee.prakashxv@adlinktech.com>
---
 .../boot/dts/adlink/adlink-lec-imx8m.dts      |  18 ++++
 arch/arm64/boot/dts/adlink/imx8mq.dtsi        |   4 +-
 arch/arm64/configs/lec_imx8m_defconfig        |   3 +-
 drivers/thermal/Kconfig                       |   6 ++
 drivers/thermal/qoriq_thermal.c               | 100 +++++++++++++++++-
 5 files changed, 127 insertions(+), 4 deletions(-)

diff --git a/arch/arm64/boot/dts/adlink/adlink-lec-imx8m.dts b/arch/arm64/boot/dts/adlink/adlink-lec-imx8m.dts
index e3c1b790a947..69613a622610 100755
--- a/arch/arm64/boot/dts/adlink/adlink-lec-imx8m.dts
+++ b/arch/arm64/boot/dts/adlink/adlink-lec-imx8m.dts
@@ -510,6 +510,13 @@
 	};
 };
 
+&i2c4 {
+	clock-frequency = <100000>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c4>;
+	status = "okay";
+};
+
 &pcie0 {
 	pinctrl-names = "default";
 	pinctrl-0 = <&pinctrl_pcie0>;
@@ -701,6 +708,13 @@
 		>;
 	};
 
+	pinctrl_i2c4: i2c4grp {
+		fsl,pins = <
+			MX8MQ_IOMUXC_I2C4_SCL_I2C4_SCL                  0x40000067
+			MX8MQ_IOMUXC_I2C4_SDA_I2C4_SDA                  0x40000067
+		>;
+	};
+
 	pinctrl_gpio4: gpio4grp {
 		fsl,pins = <
 			MX8MQ_IOMUXC_SAI1_MCLK_GPIO4_IO20       0x16
@@ -898,3 +912,7 @@
 		};
 	};
 };
+
+&tmu {
+	temp-i2c-bus = <&i2c4>;
+};
diff --git a/arch/arm64/boot/dts/adlink/imx8mq.dtsi b/arch/arm64/boot/dts/adlink/imx8mq.dtsi
index 4e837545609e..e6c273d2c2d8 100755
--- a/arch/arm64/boot/dts/adlink/imx8mq.dtsi
+++ b/arch/arm64/boot/dts/adlink/imx8mq.dtsi
@@ -227,13 +227,13 @@
 
 			trips {
 				cpu_alert: cpu-alert {
-					temperature = <80000>;
+					temperature = <100000>;
 					hysteresis = <2000>;
 					type = "passive";
 				};
 
 				cpu-crit {
-					temperature = <90000>;
+					temperature = <103000>;
 					hysteresis = <2000>;
 					type = "critical";
 				};
diff --git a/arch/arm64/configs/lec_imx8m_defconfig b/arch/arm64/configs/lec_imx8m_defconfig
index 9afac6c2d7aa..32536a47bc9a 100644
--- a/arch/arm64/configs/lec_imx8m_defconfig
+++ b/arch/arm64/configs/lec_imx8m_defconfig
@@ -406,7 +406,8 @@ CONFIG_THERMAL_EMULATION=y
 CONFIG_IMX_SC_THERMAL=y
 CONFIG_DEVICE_THERMAL=y
 CONFIG_IMX8MM_THERMAL=y
-CONFIG_QORIQ_THERMAL=y
+CONFIG_QORIQ_THERMAL=m
+CONFIG_IMX8M_EXT_THERMAL=m
 CONFIG_WATCHDOG=y
 CONFIG_ARM_SP805_WATCHDOG=y
 CONFIG_ARM_SBSA_WATCHDOG=y
diff --git a/drivers/thermal/Kconfig b/drivers/thermal/Kconfig
index 62f82dcf7729..d15014bac8b3 100644
--- a/drivers/thermal/Kconfig
+++ b/drivers/thermal/Kconfig
@@ -281,6 +281,12 @@ config QORIQ_THERMAL
 	  cpufreq is used as the cooling device to throttle CPUs when the
 	  passive trip is crossed.
 
+config IMX8M_EXT_THERMAL
+	tristate "i.MX8M Ext Thermal Sensor support"
+	depends on QORIQ_THERMAL
+	help
+	  Support for external Thermal Sensor support on i.MX8M platforms.
+
 config SPEAR_THERMAL
 	tristate "SPEAr thermal sensor driver"
 	depends on PLAT_SPEAR || COMPILE_TEST
diff --git a/drivers/thermal/qoriq_thermal.c b/drivers/thermal/qoriq_thermal.c
index ba7d6105a0e3..f95d210908a6 100644
--- a/drivers/thermal/qoriq_thermal.c
+++ b/drivers/thermal/qoriq_thermal.c
@@ -14,6 +14,12 @@
 
 #include "thermal_core.h"
 
+#ifdef CONFIG_IMX8M_EXT_THERMAL
+#include <linux/i2c.h>
+#define BridgeAddr 0x48
+int cpuGrade;
+#endif
+
 #define SITES_MAX	16
 #define TMU_TEMP_PASSIVE_COOL_DELTA	10000
 #define TMR_DISABLE		0x0
@@ -127,6 +133,9 @@ struct qoriq_tmu_data {
 	struct clk *clk;
 	bool little_endian;
 	struct qoriq_sensor	*sensor[SITES_MAX];
+#ifdef CONFIG_IMX8M_EXT_THERMAL        
+        struct i2c_adapter *ext;
+#endif         	
 };
 
 enum tmu_trip {
@@ -135,6 +144,49 @@ enum tmu_trip {
 	TMU_TRIP_NUM,
 };
 
+#ifdef CONFIG_IMX8M_EXT_THERMAL
+static int temp_i2c_read(struct i2c_adapter *bridge, char *writebuf, int writelen, char *readbuf, int readlen)
+{
+	int ret;
+
+	if (writelen > 0) {
+		struct i2c_msg msgs[] = {
+			{
+				.addr = BridgeAddr,
+				.flags = 0,
+				.len = writelen,
+				.buf = writebuf,
+			},
+			{
+				.addr = BridgeAddr,
+				.flags = I2C_M_RD,
+				.len = readlen,
+				.buf = readbuf,
+			},
+		};
+
+		ret = i2c_transfer(bridge, msgs, 2);
+		if (ret < 0)
+			printk("%s: i2c read error.\n", __func__);
+	} else {
+		struct i2c_msg msgs[] = {
+			{
+				.addr = BridgeAddr,
+				.flags = I2C_M_RD,
+				.len = readlen,
+				.buf = readbuf,
+			},
+		};
+
+		ret = i2c_transfer(bridge, msgs, 1);
+		if (ret < 0)
+			printk("%s:i2c read error.\n", __func__);
+	}
+
+	return ret;
+}
+#endif
+
 static void tmu_write(struct qoriq_tmu_data *p, u32 val, void __iomem *addr)
 {
 	if (p->little_endian)
@@ -156,10 +208,41 @@ static int tmu_get_temp(void *p, int *temp)
 	struct qoriq_sensor *qsensor = p;
 	struct qoriq_tmu_data *qdata = qsensor->qdata;
 	u32 val;
+#ifdef CONFIG_IMX8M_EXT_THERMAL        
+	int err=0;      
+	char address=0;
+	u16 extval=0;
+	int t1=0;
+	u8 *ptr;
+#endif
+
+#ifdef CONFIG_IMX8M_EXT_THERMAL
+	if(cpuGrade==2){
+		if(qdata->ext)           
+		{
+			err = temp_i2c_read(qdata->ext, &address, 1, (char *)&extval, 2);
+			if (err < 0) 
+			{
+				printk("failed to read ext temp chip id\n");                    
+			}
+			else
+			{
+				ptr = (u8 *)&extval;
+				t1 = ((ptr[0]<<8) | ptr[1])>>4;                 
+				// under 0, 12-bit format
+				if( t1&0x800)
+					*temp = 0;
+			}                      
+		}
+	} else {
+		val = tmu_read(qdata, &qdata->regs->site[qsensor->id].tritsr);
+		*temp = (val & 0xff) * 1000;
 
+	}
+#else
 	val = tmu_read(qdata, &qdata->regs->site[qsensor->id].tritsr);
 	*temp = (val & 0xff) * 1000;
-
+#endif
 	return 0;
 }
 
@@ -341,6 +424,12 @@ static int qoriq_tmu_probe(struct platform_device *pdev)
 	struct qoriq_tmu_data *data;
 	struct device_node *np = pdev->dev.of_node;
 
+#ifdef CONFIG_IMX8M_EXT_THERMAL
+        struct device_node *ext_temp;
+        void __iomem *addr = ioremap(0x30350440,0x04);
+        cpuGrade = (ioread32(addr)>>6)&0x03;
+        //printk("cpuGrade=%d\n",cpuGrade);            
+#endif 
 	data = devm_kzalloc(&pdev->dev, sizeof(struct qoriq_tmu_data),
 			    GFP_KERNEL);
 	if (!data)
@@ -372,6 +461,15 @@ static int qoriq_tmu_probe(struct platform_device *pdev)
 	if (data->ver == TMU_VER2)
 		data->regs_v2 = (void __iomem *)data->regs;
 
+#ifdef CONFIG_IMX8M_EXT_THERMAL
+	ext_temp = of_parse_phandle(pdev->dev.of_node, "temp-i2c-bus", 0);
+	if (ext_temp) {
+		data->ext = of_find_i2c_adapter_by_node(ext_temp);
+		of_node_put(ext_temp);          
+		if (!data->ext) 
+			dev_err(&pdev->dev, "failed to get i2c adapter \n");
+	}       
+#endif
 	qoriq_tmu_init_device(data);	/* TMU initialization */
 
 	ret = qoriq_tmu_calibration(pdev);	/* TMU calibration */
-- 
2.17.1


diff --git a/bt/bt_drv.h b/bt/bt_drv.h
index 64323ca..fa53cc3 100755
--- a/bt/bt_drv.h
+++ b/bt/bt_drv.h
@@ -28,6 +28,10 @@
 #include <linux/skbuff.h>
 #include <linux/vmalloc.h>
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 6, 0)
+#include <linux/ktime.h>
+#endif
+
 #include "hci_wrapper.h"
 
 /** MAX adapter BT driver supported */
@@ -557,7 +561,11 @@ struct proc_private_data {
 	/** Private structure */
 	struct _bt_private *pbt;
 	/** File operations */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 6, 0)
+	const struct proc_ops *fops;
+#else
 	const struct file_operations *fops;
+#endif
 };
 
 /** Device proc structure */
@@ -589,7 +597,11 @@ typedef struct _bt_private {
 	/** Init user configure file wait queue */
 	wait_queue_head_t init_user_conf_wait_q __ATTRIB_ALIGN__;
 	/** Firmware request start time */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 6, 0)
+	struct __kernel_old_timeval req_fw_time;
+#else
 	struct timeval req_fw_time;
+#endif
 	/** Hotplug device */
 	struct device *hotplug_device;
 	/** thread to service interrupts */
@@ -935,14 +947,25 @@ typedef struct _BT_HCI_CMD {
 } __ATTRIB_PACK__ BT_HCI_CMD;
 
 static inline void
-get_monotonic_time(struct timeval *tv)
+get_monotonic_time(
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 6, 0)
+	struct __kernel_old_timeval
+#else
+	struct timeval
+#endif
+	*tv)
 {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 6, 0)
+	struct timespec64 ts;
+	ktime_get_raw_ts64(&ts);
+#else
 	struct timespec ts;
-
 	getrawmonotonic(&ts);
+#endif
+
 	if (tv) {
-		tv->tv_sec = ts.tv_sec;
-		tv->tv_usec = ts.tv_nsec / 1000;
+		tv->tv_sec = (u32)ts.tv_sec;
+		tv->tv_usec = (u32)ts.tv_nsec / 1000;
 	}
 }
 
diff --git a/bt/bt_main.c b/bt/bt_main.c
index d7942a9..4dd7237 100755
--- a/bt/bt_main.c
+++ b/bt/bt_main.c
@@ -369,7 +369,11 @@ bt_store_firmware_dump(bt_private *priv, u8 *buf, u32 len)
 	struct file *pfile_fwdump = NULL;
 	loff_t pos = 0;
 	u16 seqnum = 0;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 6, 0)
+	struct __kernel_old_timeval t;
+#else
 	struct timeval t;
+#endif
 	u32 sec;
 
 	ENTER();
diff --git a/bt/bt_proc.c b/bt/bt_proc.c
index 42be6b3..7c6fc0e 100755
--- a/bt/bt_proc.c
+++ b/bt/bt_proc.c
@@ -494,6 +494,21 @@ proc_open(struct inode *inode, struct file *file)
 }
 
 /** Proc read ops */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 6, 0)
+static const struct proc_ops proc_read_ops = {
+	.proc_read = proc_read,
+	.proc_open = proc_open,
+	.proc_release = proc_close
+};
+
+/** Proc Read-Write ops */
+static const struct proc_ops proc_rw_ops = {
+	.proc_read = proc_read,
+	.proc_write = proc_write,
+	.proc_open = proc_open,
+	.proc_release = proc_close
+};
+#else
 static const struct file_operations proc_read_ops = {
 	.read = proc_read,
 	.open = proc_open,
@@ -507,6 +522,7 @@ static const struct file_operations proc_rw_ops = {
 	.open = proc_open,
 	.release = proc_close
 };
+#endif
 
 static struct proc_private_data proc_files[] = {
 	{"status", S_IRUGO, 1024,
@@ -644,6 +660,16 @@ bt_histogram_proc_open(struct inode *inode, struct file *file)
 }
 
 /** Histogram proc fops */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 6, 0)
+
+static const struct proc_ops histogram_proc_fops = {
+	.proc_open = bt_histogram_proc_open,
+	.proc_read = seq_read,
+	.proc_lseek = seq_lseek,
+	.proc_release = single_release,
+};
+#else
+
 static const struct file_operations histogram_proc_fops = {
 	.owner = THIS_MODULE,
 	.open = bt_histogram_proc_open,
@@ -651,6 +677,7 @@ static const struct file_operations histogram_proc_fops = {
 	.llseek = seq_lseek,
 	.release = single_release,
 };
+#endif
 
 /**
  *  @brief This function initializes proc entry
diff --git a/bt/bt_sdiommc.c b/bt/bt_sdiommc.c
index 15be2b0..012af37 100755
--- a/bt/bt_sdiommc.c
+++ b/bt/bt_sdiommc.c
@@ -693,7 +693,11 @@ sd_request_fw_dpc(const struct firmware *fw_firmware, void *context)
 	bt_private *priv = (bt_private *)context;
 	struct sdio_mmc_card *card = NULL;
 	struct m_dev *m_dev_bt = NULL;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 6, 0)
+	struct __kernel_old_timeval tstamp;
+#else
 	struct timeval tstamp;
+#endif
 	int index;
 
 	ENTER();
